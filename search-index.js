var searchIndex = {};
searchIndex["bio"] = {"doc":"# Rust-bio, a bioinformatics library for Rust.\nThis library provides implementations of many algorithms and data structures\nthat are useful for bioinformatics.\nAll provided implementations are rigorously tested via continuous\nintegration.\nFor installation instructions and a general overview, visit\nhttps://rust-bio.github.io.","items":[[0,"utils","bio","Common utilities.",null,null],[3,"NonNaNFloat","bio::utils","",null,null],[5,"trim_newline","","Remove a trailing newline from the given string in place.",null,{"inputs":[{"name":"string"}],"output":null}],[5,"scan","","In place implementation of scan over a slice.",null,null],[5,"prescan","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"nonnanfloat"}],"output":{"name":"nonnanfloat"}}],[11,"fmt","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"nonnanfloat"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[11,"unwrap","","",0,{"inputs":[{"name":"nonnanfloat"}],"output":{"name":"f"}}],[11,"cmp","","",0,{"inputs":[{"name":"nonnanfloat"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"alphabets","bio","Implementation of alphabets and useful utilities.",null,null],[3,"Alphabet","bio::alphabets","Representation of an alphabet.",null,null],[12,"symbols","","",1,null],[3,"RankTransform","","Tools based on transforming the alphabet symbols to their lexicographical ranks.",null,null],[12,"ranks","","",2,null],[3,"QGrams","","Iterator over q-grams.",null,null],[0,"dna","","Implementation of the DNA alphabet.",null,null],[3,"RevComp","bio::alphabets::dna","Implementation of transformation into reverse complement.",null,null],[5,"alphabet","","The DNA alphabet (uppercase and lowercase).",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"n_alphabet","","The DNA alphabet including N (uppercase and lowercase).",null,{"inputs":[],"output":{"name":"alphabet"}}],[5,"iupac_alphabet","","The IUPAC DNA alphabet (uppercase and lowercase).",null,{"inputs":[],"output":{"name":"alphabet"}}],[11,"new","","Create a new instance of reverse complement algorithm.",3,{"inputs":[],"output":{"name":"self"}}],[11,"comp","","",3,{"inputs":[{"name":"revcomp"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"get","","Calculate the reverse complement of given text.\nThe text has to be in DNA alphabet containing only ACGTacgt symbols.\nOther symbols won&#39;t be converted.",3,null],[0,"protein","bio::alphabets","Implementation of the protein alphabet.",null,null],[5,"alphabet","bio::alphabets::protein","Returns the standard protein alphabet, containing the 20 common amino acids.",null,{"inputs":[],"output":{"name":"alphabet"}}],[6,"SymbolRanks","bio::alphabets","",null,null],[11,"new","","Create new alphabet from given symbols.",1,null],[11,"insert","","Insert symbol into alphabet.",1,{"inputs":[{"name":"alphabet"},{"name":"u8"}],"output":null}],[11,"is_word","","Check if given text is a word over the alphabet.",1,null],[11,"max_symbol","","Return lexicographically maximal symbol.",1,{"inputs":[{"name":"alphabet"}],"output":{"name":"option"}}],[11,"len","","Return size of the alphabet.",1,{"inputs":[{"name":"alphabet"}],"output":{"name":"usize"}}],[11,"is_empty","","Is this alphabet empty?",1,{"inputs":[{"name":"alphabet"}],"output":{"name":"bool"}}],[11,"from_iter","","Create a new alphabet from the given iterator.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Construct a new `RankTransform`.",2,{"inputs":[{"name":"alphabet"}],"output":{"name":"self"}}],[11,"get","","Get the rank of symbol `a`.",2,{"inputs":[{"name":"ranktransform"},{"name":"u8"}],"output":{"name":"u8"}}],[11,"transform","","Transform a given `text`.",2,null],[11,"qgrams","","Iterate over q-grams (substrings of length q) of given `text`. The q-grams are encoded\nas `usize` by storing the symbol ranks in log2(|A|) bits (with |A| being the alphabet size).",2,null],[11,"alphabet","","Restore alphabet from transform.",2,{"inputs":[{"name":"ranktransform"}],"output":{"name":"alphabet"}}],[11,"next","","",4,{"inputs":[{"name":"qgrams"}],"output":{"name":"option"}}],[0,"pattern_matching","bio","This module contains various useful pattern matching algorithms.\nThe implementations are based on the lecture notes\n&quot;Algorithmen auf Sequenzen&quot;, Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[0,"shift_and","bio::pattern_matching","ShiftAnd algorithm for pattern matching.\nPatterns may contain at most 64 symbols.\nComplexity: O(n) with text length n.",null,null],[3,"ShiftAnd","bio::pattern_matching::shift_and","ShiftAnd algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[5,"masks","","Calculate ShiftAnd masks. This function is called automatically when instantiating\na new ShiftAnd for a given pattern.",null,null],[11,"new","","Create new ShiftAnd instance from a given pattern.",5,null],[11,"find_all","","Find all matches of pattern in the given text. Matches are returned as an iterator\nover start positions.",5,{"inputs":[{"name":"shiftand"},{"name":"i"}],"output":{"name":"matches"}}],[11,"next","","",6,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"kmp","bio::pattern_matching","Algorithm of Knuth Morris and Pratt.\nConstructs an automaton recognizing the pattern, and scans linearly over\na text of length n. Complexity: O(n).\nThe transition function delta is simulated via the lps-function, that assigns to each position\nq in the pattern the longest prefix of the pattern that is suffix of pattern[..q+1].\nThen, in the NFA for the pattern, active states after reading position q are\n{q, lps(q), lps(lps(q)), ... 0}.",null,null],[3,"KMP","bio::pattern_matching::kmp","KMP algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",7,null],[11,"find_all","","Find all matches of pattern in a given text. Matches are returned as iterator over start positions.",7,{"inputs":[{"name":"kmp"},{"name":"i"}],"output":{"name":"matches"}}],[11,"next","","",8,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"bom","bio::pattern_matching","Backward oracle matching algorithm.\nBest-case complexity: O(n / m) with pattern of length m and text of length n.\nWorst case complexity: O(n * m).",null,null],[3,"BOM","bio::pattern_matching::bom","Backward oracle matching algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",9,null],[11,"find_all","","Find all matches of the pattern in the given text. Matches are returned as an iterator over start positions.",9,null],[11,"next","","",10,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"horspool","bio::pattern_matching","Algorithm of Horspool.\nWindow-based, similar to but faster than Boyer-Moore.",null,null],[3,"Horspool","bio::pattern_matching::horspool","Algorithm of Horspool.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",11,null],[11,"find_all","","Find all matches with a given text. Matches are returned as an iterator over start positions.",11,null],[11,"next","","",12,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"bndm","bio::pattern_matching","Backward nondeterministic DAWG matching (BNDM).\nBest-case complexity: O(n / m) with pattern of length m &lt;= 64 and text of length n.\nWorst case complexity: O(n * m).",null,null],[3,"BNDM","bio::pattern_matching::bndm","BNDM algorithm.",null,null],[3,"Matches","","Iterator over start positions of matches.",null,null],[11,"new","","Create a new instance for a given pattern.",13,null],[11,"find_all","","Find all matches of pattern with a given text. Matches are returned as iterator over start positions.",13,null],[11,"next","","",14,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"ukkonen","bio::pattern_matching","Bounded version of Ukkonens DP algorithm for approximate pattern matching.\nComplexity: O(n * k) on random texts.",null,null],[3,"Ukkonen","bio::pattern_matching::ukkonen","Ukkonens algorithm.",null,null],[3,"Matches","","Iterator over pairs of end positions and distance of matches.",null,null],[5,"unit_cost","","Default cost function (unit costs).",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"u32"}}],[11,"with_capacity","","Initialize algorithm with given capacity and cost function.",15,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"find_all_end","","Find all matches between pattern and text with up to k errors.\nMatches are returned as an iterator over pairs of end position and distance.",15,null],[11,"next","","",16,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"myers","bio::pattern_matching","Myers bit-parallel approximate pattern matching algorithm.\nFinds all matches up to a given edit distance. The pattern has to fit into a bitvector,\nand is here limited to 64 symbols.\nComplexity: O(n)",null,null],[3,"Myers","bio::pattern_matching::myers","Myers algorithm.",null,null],[3,"Matches","","Iterator over pairs of end positions and distance of matches.",null,null],[11,"new","","Create a new instance of Myers algorithm for a given pattern.",17,null],[11,"with_wildcard","","Create a new instance of Myers algorithm for a given pattern and a wildcard character\nthat shall match any character.",17,null],[11,"distance","","Calculate the global distance of the pattern to the given text.",17,null],[11,"find_all_end","","Find all matches of pattern in the given text up to a given maximum distance.\nMatches are returned as an iterator over pairs of end position and distance.",17,{"inputs":[{"name":"myers"},{"name":"i"},{"name":"u8"}],"output":{"name":"matches"}}],[11,"next","","",18,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[0,"data_structures","bio","Various useful data structures.",null,null],[0,"rank_select","bio::data_structures","Rank/Select data structure based on Gonzalez, Grabowski, Mäkinen, Navarro (2005).\nThis implementation uses only a single level of blocks, and performs well for large n.",null,null],[3,"RankSelect","bio::data_structures::rank_select","A rank/select data structure.",null,null],[11,"new","","Create a new instance.",19,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"rankselect"}}],[11,"rank","","Get the rank of a given bit, i.e. the number of 1-bits in the bitvector up to i (inclusive).\nComplexity: O(k).",19,{"inputs":[{"name":"rankselect"},{"name":"usize"}],"output":{"name":"option"}}],[11,"select","","Get the smallest bit with a given rank.\nComplexity: O(log (n / k) + k).",19,{"inputs":[{"name":"rankselect"},{"name":"u32"}],"output":{"name":"option"}}],[0,"suffix_array","bio::data_structures","Suffix arrays and related algorithms.\nThe implementation is based on the lecture notes\n&quot;Algorithmen auf Sequenzen&quot;, Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[5,"suffix_array","bio::data_structures::suffix_array","Construct suffix array for given text of length n.\nComplexity: O(n).\nThis is an implementation of the induced sorting as presented by\nGe Nong, Sen Zhang und Wai Hong Chan (2009), also known as SAIS.\nThe implementation is based on the following lecture notes:\nhttp://ls11-www.cs.tu-dortmund.de/people/rahmann/algoseq.pdf",null,null],[5,"lcp","","Construct lcp array for given text and suffix array of length n.\nComplexity: O(n).",null,null],[6,"SuffixArray","","",null,null],[6,"LCPArray","","",null,null],[0,"bwt","bio::data_structures","The Burrows-Wheeler-Transform and related data structures.\nThe implementation is based on the lecture notes\n&quot;Algorithmen auf Sequenzen&quot;, Kopczynski, Marschall, Martin and Rahmann, 2008 - 2015.",null,null],[3,"Occ","bio::data_structures::bwt","An occurence array implementation.",null,null],[5,"bwt","","Calculate Burrows-Wheeler-Transform of the given text of length n.\nComplexity: O(n).",null,null],[5,"invert_bwt","","Calculate the inverse of a BWT of length n, which is the original text.\nComplexity: O(n).",null,{"inputs":[{"name":"bwt"}],"output":{"name":"vec"}}],[5,"less","","Calculate the less array for a given BWT. Complexity O(n).",null,{"inputs":[{"name":"bwt"},{"name":"alphabet"}],"output":{"name":"less"}}],[5,"bwtfind","","Calculate the bwtfind array needed for inverting the BWT. Complexity O(n).",null,{"inputs":[{"name":"bwt"},{"name":"alphabet"}],"output":{"name":"bwtfind"}}],[6,"BWT","","",null,null],[6,"Less","","",null,null],[6,"BWTFind","","",null,null],[11,"new","","Calculate occ array with sampling from BWT of length n.\nTime complexity: O(n).\nSpace complexity: O(n / k * A) with A being the alphabet size.\nAlphabet size is determined on the fly from the BWT.\nFor large texts, it is therefore advisable to transform\nthe text before calculating the BWT (see alphabets::rank_transform).",20,{"inputs":[{"name":"bwt"},{"name":"usize"},{"name":"alphabet"}],"output":{"name":"self"}}],[11,"get","","Get occurrence count of symbol a in BWT[..r+1].\nComplexity: O(k).",20,{"inputs":[{"name":"occ"},{"name":"bwt"},{"name":"usize"},{"name":"u8"}],"output":{"name":"usize"}}],[0,"bitenc","bio::data_structures","A fixed-width bit encoding implementation. This allows to store a sequence of values over\na reduced alphabet by packing them bit-encoded into a sequence of bytes.",null,null],[3,"BitEnc","bio::data_structures::bitenc","A sequence of bitencoded values.",null,null],[3,"BitEncIter","","Iterator over values of a bitencoded sequence (values will be unpacked into bytes).",null,null],[11,"new","","Create a new instance with a given encoding width (e.g. width=2 for using two bits per value).",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_capacity","","Create a new instance with a given capacity and encoding width (e.g. width=2 for using two bits per value).",21,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","Append a value.",21,{"inputs":[{"name":"bitenc"},{"name":"u8"}],"output":null}],[11,"push_values","","Append `n` times the given value.",21,{"inputs":[{"name":"bitenc"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"set","","Set the value as position `i`.",21,{"inputs":[{"name":"bitenc"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"get","","Get the value at position `i`.",21,{"inputs":[{"name":"bitenc"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Iterate over stored values (values will be unpacked into bytes).",21,{"inputs":[{"name":"bitenc"}],"output":{"name":"bitenciter"}}],[11,"clear","","Clear the sequence.",21,{"inputs":[{"name":"bitenc"}],"output":null}],[11,"len","","",21,{"inputs":[{"name":"bitenc"}],"output":{"name":"usize"}}],[11,"is_empty","","",21,{"inputs":[{"name":"bitenc"}],"output":{"name":"bool"}}],[11,"next","","",22,{"inputs":[{"name":"bitenciter"}],"output":{"name":"option"}}],[0,"smallints","bio::data_structures","A data structure for a sequence of small integers with a few big integers.\nSmall ints are stored in type S (e.g. a byte), big ints are stored separately (in type B) in a BTree.\nThe implementation provides vector-like operations on the data structure (e.g. retrieve a position,\nadd an integer, etc.).",null,null],[3,"SmallInts","bio::data_structures::smallints","Data structure for storing a sequence of small integers with few big ones space efficiently\nwhile supporting classical vector operations.",null,null],[3,"Iter","","Iterator over the elements of a SmallInts sequence.",null,null],[11,"new","","Create a new instance.",23,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Create a new instance with a given capacity.",23,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_elem","","Create a new instance containing `n` times the integer `v` (and `v` is expected to be small).",23,{"inputs":[{"name":"s"},{"name":"usize"}],"output":{"name":"self"}}],[11,"get","","Return the integer at position `i`.",23,{"inputs":[{"name":"smallints"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","Append `v` to the sequence. This will determine whether `v` is big or small and store it accordingly.",23,{"inputs":[{"name":"smallints"},{"name":"b"}],"output":null}],[11,"set","","Set value of position `i` to `v`. This will determine whether `v` is big or small and store it accordingly.",23,{"inputs":[{"name":"smallints"},{"name":"usize"},{"name":"b"}],"output":null}],[11,"iter","","Iterate over sequence. Values will be returned in the big integer type (`B`).",23,{"inputs":[{"name":"smallints"}],"output":{"name":"iter"}}],[11,"decompress","","Decompress into a normal vector of big integers (type `B`).",23,{"inputs":[{"name":"smallints"}],"output":{"name":"vec"}}],[11,"len","","Length of the sequence.",23,{"inputs":[{"name":"smallints"}],"output":{"name":"usize"}}],[11,"is_empty","","is the sequence empty?",23,{"inputs":[{"name":"smallints"}],"output":{"name":"bool"}}],[11,"next","","",24,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"fmindex","bio::data_structures","FM-Index and FMD-Index for finding suffix array intervals matching a given pattern in linear time.",null,null],[3,"Interval","bio::data_structures::fmindex","A suffix array interval.",null,null],[3,"FMIndex","","The Fast Index in Minute space (FM-Index, Ferragina and Manzini, 2000) for finding suffix array\nintervals matching a given pattern.",null,null],[3,"BiInterval","","A bi-interval on suffix array of the forward and reverse strand of a DNA text.",null,null],[3,"FMDIndex","","The FMD-Index for linear time search of supermaximal exact matches on forward and reverse\nstrand of DNA texts (Li, 2012).",null,null],[11,"clone","","",25,{"inputs":[{"name":"interval"}],"output":{"name":"interval"}}],[11,"fmt","","",25,{"inputs":[{"name":"interval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"occ","","Return the occurrence positions of the pattern as a slice of the suffix array.",25,null],[11,"new","","Construct a new instance of the FM index.",26,{"inputs":[{"name":"bwt"},{"name":"usize"},{"name":"alphabet"}],"output":{"name":"self"}}],[11,"backward_search","","Perform backward search, yielding suffix array\ninterval denoting exact occurences of the given pattern of length m in the text.\nComplexity: O(m).",26,{"inputs":[{"name":"fmindex"},{"name":"p"}],"output":{"name":"interval"}}],[11,"bwt","","Provide a reference to the underlying BWT.",26,{"inputs":[{"name":"fmindex"}],"output":{"name":"bwt"}}],[11,"clone","","",27,{"inputs":[{"name":"biinterval"}],"output":{"name":"biinterval"}}],[11,"fmt","","",27,{"inputs":[{"name":"biinterval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"occ","","Return the occurrence positions of the pattern as a slice of the suffix array.",27,null],[11,"occ_revcomp","","Return the occurrence positions of the reverse complement of the pattern as a slice of the suffix array.",27,null],[11,"new","","Construct a new instance of the FMD index (see Heng Li (2012) Bioinformatics).\nThis expects a BWT that was created from a text over the DNA alphabet with N\n(`alphabets::dna::n_alphabet()`) consisting of the\nconcatenation with its reverse complement, separated by the sentinel symbol `$`.\nI.e., let T be the original text and R be its reverse complement.\nThen, the expected text is T$R$. Further, multiple concatenated texts are allowed, e.g.\nT1$R1$T2$R2$T3$R3$.",28,{"inputs":[{"name":"bwt"},{"name":"usize"}],"output":{"name":"self"}}],[11,"smems","","Find supermaximal exact matches of given pattern that overlap position i in the pattern.\nComplexity O(m) with pattern of length m.",28,null],[11,"fmindex","","Provide a reference to the underlying FMIndex.",28,{"inputs":[{"name":"fmdindex"}],"output":{"name":"fmindex"}}],[0,"qgram_index","bio::data_structures","A classical, flexible, q-gram index implementation.",null,null],[3,"QGramIndex","bio::data_structures::qgram_index","A classical, flexible, q-gram index implementation.",null,null],[3,"Interval","","An interval, consisting of start and stop position (the latter exclusive).",null,null],[12,"start","","",29,null],[12,"stop","","",29,null],[3,"Match","","A match between the pattern and the text.",null,null],[12,"pattern","","",30,null],[12,"text","","",30,null],[12,"count","","",30,null],[3,"ExactMatch","","An exact match between the pattern and the text.",null,null],[12,"pattern","","",31,null],[12,"text","","",31,null],[11,"new","","Create a new q-gram index.\nThe q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number\nbits with the `usize` data type.",32,null],[11,"with_max_count","","Create a new q-gram index, only considering q-grams that occur at most `max_count` times.\nThe q has to be smaller than b / log2(|A|) with |A| being the alphabet size and b the number\nbits with the `usize` data type.",32,null],[11,"q","","The used q.",32,{"inputs":[{"name":"qgramindex"}],"output":{"name":"u32"}}],[11,"qgram_matches","","Return text positions with matching q-gram. Complexity O(1).",32,null],[11,"matches","","Return matches of the given pattern.\nComplexity O(m + k) for pattern of length m and k being the number of matching q-grams.",32,null],[11,"exact_matches","","Return exact matches (substrings) of the given pattern.\nComplexity O(m + k) for pattern of length m and k being the number of matching q-grams.",32,null],[11,"clone","","",29,{"inputs":[{"name":"interval"}],"output":{"name":"interval"}}],[11,"fmt","","",29,{"inputs":[{"name":"interval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"interval"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"interval"},{"name":"interval"}],"output":{"name":"bool"}}],[11,"get","","Get the text within the given interval.",29,null],[11,"clone","","",30,{"inputs":[{"name":"match"}],"output":{"name":"match"}}],[11,"fmt","","",30,{"inputs":[{"name":"match"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"match"},{"name":"match"}],"output":{"name":"bool"}}],[11,"cmp","","",30,{"inputs":[{"name":"match"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"match"},{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"exactmatch"}],"output":{"name":"exactmatch"}}],[11,"fmt","","",31,{"inputs":[{"name":"exactmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"exactmatch"},{"name":"exactmatch"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"exactmatch"},{"name":"exactmatch"}],"output":{"name":"bool"}}],[0,"alignment","bio","Various alignment and distance computing algorithms.",null,null],[3,"Alignment","bio::alignment","An alignment, consisting of a score, a start in sequence y, a start in sequence x, the length\nof sequence x and its edit operations (see alignment::pairwise for meaning of x and y).",null,null],[12,"score","","",33,null],[12,"ystart","","",33,null],[12,"xstart","","",33,null],[12,"xlen","","",33,null],[12,"operations","","",33,null],[4,"AlignmentOperation","","Alignment operations (Match, Subst, Del and Ins).",null,null],[13,"Match","","",34,null],[13,"Subst","","",34,null],[13,"Del","","",34,null],[13,"Ins","","",34,null],[0,"pairwise","","Calculate alignments with a generalized variant of the Smith Waterman algorithm.\nComplexity: O(n * m) for strings of length m and n.",null,null],[3,"Aligner","bio::alignment::pairwise","A generalized Smith-Waterman aligner.",null,null],[11,"new","","Create new aligner instance with given gap open and gap extend penalties\nand the score function.",35,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_capacity","","Create new aligner instance. The size hints help to\navoid unnecessary memory allocations.",35,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"},{"name":"f"}],"output":{"name":"self"}}],[11,"global","","Calculate global alignment of x against y.",35,null],[11,"semiglobal","","Calculate semiglobal alignment of x against y (x is global, y is local).",35,null],[11,"local","","Calculate local alignment of x against y.",35,null],[0,"distance","bio::alignment","Various subroutines for computing a distance between sequences.\nComplexity: O(n) for strings of length n for the Hamming distance;\nO(n * m) for strings of length n and m for the Levenshtein (or edit) distance.",null,null],[5,"hamming","bio::alignment::distance","Compute the Hamming distance between two strings with `hamming`. If returns the `Result&lt;u32, &amp;str&gt;` type\nwith the first element corresponding to the distance between two strings (a number of mismatches) and the second one to the error message\nwhen two strings are not of equal sizes.",null,null],[5,"levenshtein","","Compute the Levenshtein (or Edit) distance between two strings with `levenshtein`. It returns a distance between two strings,\ni.e. minimal number of mismatches, insertions and deletions between two strings.",null,null],[11,"clone","bio::alignment","",34,{"inputs":[{"name":"alignmentoperation"}],"output":{"name":"alignmentoperation"}}],[11,"fmt","","",34,{"inputs":[{"name":"alignmentoperation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"alignmentoperation"},{"name":"alignmentoperation"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"alignmentoperation"},{"name":"alignmentoperation"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cigar","","Calculate the cigar string.",33,{"inputs":[{"name":"alignment"},{"name":"bool"}],"output":{"name":"string"}}],[11,"pretty","","Return the pretty formatted alignment as a String.",33,null],[0,"io","bio","Readers and writers for common bioinformatics file formats.",null,null],[0,"fastq","bio::io","FastQ reading and writing.",null,null],[3,"Reader","bio::io::fastq","A FastQ reader.",null,null],[3,"Record","","A FastQ record.",null,null],[3,"Records","","An iterator over the records of a FastQ file.",null,null],[3,"Writer","","A FastQ writer.",null,null],[11,"from_file","","Read from a given file.",36,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Read from a given `io::Read`.",36,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"read","","Read into a given record.\nReturns an error if the record in incomplete or syntax is violated.\nThe content of the record can be checked via the record object.",36,{"inputs":[{"name":"reader"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Return an iterator over the records of this FastQ file.",36,{"inputs":[{"name":"reader"}],"output":{"name":"records"}}],[11,"new","","Create a new, empty FastQ record.",37,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Check if record is empty.",37,{"inputs":[{"name":"record"}],"output":{"name":"bool"}}],[11,"check","","Check validity of FastQ record.",37,{"inputs":[{"name":"record"}],"output":{"name":"result"}}],[11,"id","","Return the id of the record.",37,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"desc","","Return descriptions if present.",37,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"seq","","Return the sequence of the record.",37,null],[11,"qual","","Return the base qualities of the record.",37,null],[11,"next","","",38,{"inputs":[{"name":"records"}],"output":{"name":"option"}}],[11,"to_file","","Write to a given file path.",39,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Write to a given `io::Write`.",39,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"write_record","","Directly write a FastQ record.",39,{"inputs":[{"name":"writer"},{"name":"record"}],"output":{"name":"result"}}],[11,"write","","Write a FastQ record with given id, optional description, sequence and qualities.",39,null],[11,"flush","","Flush the writer, ensuring that everything is written.",39,{"inputs":[{"name":"writer"}],"output":{"name":"result"}}],[0,"fasta","bio::io","FASTA format reading and writing.",null,null],[3,"Reader","bio::io::fasta","A FASTA reader.",null,null],[3,"Index","","A FASTA index as created by SAMtools (.fai).",null,null],[3,"IndexedReader","","A FASTA reader with an index as created by SAMtools (.fai).",null,null],[12,"index","","",40,null],[3,"Sequence","","A sequence record returned by the FASTA index.",null,null],[12,"name","","",41,null],[12,"len","","",41,null],[3,"Writer","","A Fasta writer.",null,null],[3,"Record","","A FASTA record.",null,null],[3,"Records","","An iterator over the records of a Fasta file.",null,null],[11,"from_file","","Read FASTA from given file path.",42,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Create a new Fasta reader given an instance of `io::Read`.",42,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"read","","Read next FASTA record into the given `Record`.",42,{"inputs":[{"name":"reader"},{"name":"record"}],"output":{"name":"result"}}],[11,"records","","Return an iterator over the records of this FastQ file.",42,{"inputs":[{"name":"reader"}],"output":{"name":"records"}}],[11,"new","","Open a FASTA index from a given `io::Read` instance.",43,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"from_file","","Open a FASTA index from a given file path.",43,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"with_fasta_file","","Open a FASTA index given the corresponding FASTA file path (e.g. for ref.fasta we expect ref.fasta.fai).",43,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sequences","","Return a vector of sequences described in the index.",43,{"inputs":[{"name":"index"}],"output":{"name":"vec"}}],[11,"from_file","","Read from a given file path. This assumes the index ref.fasta.fai to be present for FASTA ref.fasta.",40,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Read from a FASTA and its index, both given as `io::Read`. FASTA has to be `io::Seek` in addition.",40,{"inputs":[{"name":"r"},{"name":"i"}],"output":{"name":"result"}}],[11,"with_index","","Read from a FASTA and its index, the first given as `io::Read`, the second given as index object.",40,{"inputs":[{"name":"r"},{"name":"index"}],"output":{"name":"self"}}],[11,"read_all","","For a given seqname, read the whole sequence into the given vector.",40,null],[11,"read","","Read the given interval of the given seqname into the given vector (stop position is exclusive).",40,null],[11,"to_file","","Write to the given file path.",44,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Create a new Fasta writer.",44,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"write_record","","Directly write a Fasta record.",44,{"inputs":[{"name":"writer"},{"name":"record"}],"output":{"name":"result"}}],[11,"write","","Write a Fasta record with given id, optional description and sequence.",44,null],[11,"flush","","Flush the writer, ensuring that everything is written.",44,{"inputs":[{"name":"writer"}],"output":{"name":"result"}}],[11,"new","","Create a new instance.",45,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Check if record is empty.",45,{"inputs":[{"name":"record"}],"output":{"name":"bool"}}],[11,"check","","Check validity of Fasta record.",45,{"inputs":[{"name":"record"}],"output":{"name":"result"}}],[11,"id","","Return the id of the record.",45,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"desc","","Return descriptions if present.",45,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"seq","","Return the sequence of the record.",45,null],[11,"next","","",46,{"inputs":[{"name":"records"}],"output":{"name":"option"}}],[0,"bed","bio::io","BED format reading and writing.",null,null],[3,"Reader","bio::io::bed","A BED reader.",null,null],[3,"Records","","A BED record.",null,null],[3,"Writer","","A BED writer.",null,null],[3,"Record","","A BED record as defined by BEDtools (http://bedtools.readthedocs.org/en/latest/content/general-usage.html)",null,null],[4,"Strand","","Strand information.",null,null],[13,"Forward","","",47,null],[13,"Reverse","","",47,null],[11,"from_file","","Read from a given file path.",48,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Read from a given reader.",48,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"records","","Iterate over all records.",48,{"inputs":[{"name":"reader"}],"output":{"name":"records"}}],[11,"next","","",49,{"inputs":[{"name":"records"}],"output":{"name":"option"}}],[11,"to_file","","Write to a given file path.",50,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new","","Write to a given writer.",50,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"write","","Write a given BED record.",50,{"inputs":[{"name":"writer"},{"name":"record"}],"output":{"name":"result"}}],[11,"encode","","",51,{"inputs":[{"name":"record"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new BED record.",51,{"inputs":[],"output":{"name":"self"}}],[11,"chrom","","Chromosome of the feature.",51,{"inputs":[{"name":"record"}],"output":{"name":"str"}}],[11,"start","","Start position of feature (0-based).",51,{"inputs":[{"name":"record"}],"output":{"name":"u64"}}],[11,"end","","End position of feature (0-based, not included).",51,{"inputs":[{"name":"record"}],"output":{"name":"u64"}}],[11,"name","","Name of the feature.",51,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"score","","Score of the feature.",51,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"strand","","Strand of the feature.",51,{"inputs":[{"name":"record"}],"output":{"name":"option"}}],[11,"aux","","Access auxilliary fields after the strand field by index (counting first field (chromosome) as 0).",51,{"inputs":[{"name":"record"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set_chrom","","Set chromosome.",51,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[11,"set_start","","Set start of feature.",51,{"inputs":[{"name":"record"},{"name":"u64"}],"output":null}],[11,"set_end","","Set end of feature.",51,{"inputs":[{"name":"record"},{"name":"u64"}],"output":null}],[11,"set_name","","Set name.",51,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[11,"set_score","","Set score.",51,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[11,"push_aux","","Add auxilliary field. This has to happen after name and score have been set.",51,{"inputs":[{"name":"record"},{"name":"str"}],"output":null}],[0,"stats","bio","Mathematical and statistical tools.",null,null],[0,"combinatorics","bio::stats","Combinations with and without replacement.",null,null],[5,"scaled_combinations","bio::stats::combinatorics","Calculate the number of combinations when choosing\nk elements from n elements without replacement, multiplied by a scaling factor.",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"combinations","","Calculate the number of combinations when choosing\nk elements from n elements without replacement.\nThis is also known as n over k, or the binomial coefficient.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"f64"}}],[5,"combinations_with_repl","","Calculate the number of combinations when choosing\nk elements from n elements with replacement.",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"f64"}}],[0,"logprobs","bio::stats","Handling log-probabilities.",null,null],[5,"ln_1m_exp","bio::stats::logprobs","Calculate log(1 - p) with p given in log space without loss of precision as described in\nhttp://cran.r-project.org/web/packages/Rmpfr/vignettes/log1mexp-note.pdf.",null,{"inputs":[{"name":"logprob"}],"output":{"name":"logprob"}}],[5,"log_to_phred","","Convert log scale probability to PHRED scale.",null,{"inputs":[{"name":"logprob"}],"output":{"name":"f64"}}],[5,"phred_to_log","","Convert PHRED scale probability to log scale.",null,{"inputs":[{"name":"f64"}],"output":{"name":"logprob"}}],[5,"sum","","Calculate the sum of the given probabilities in a numerically stable way (Durbin 1998).",null,null],[5,"add","","Calculate the sum of the given probabilities in a numerically stable way (Durbin 1998).",null,{"inputs":[{"name":"logprob"},{"name":"logprob"}],"output":{"name":"logprob"}}],[5,"cumsum","","Calculate the cumulative sum of the given probabilities in a numerically stable way (Durbin 1998).",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[6,"Prob","bio::stats","An alias for `f64` to indicate a probability.",null,null],[6,"LogProb","","An alias for `f64` to indicate a log-probability.",null,null],[0,"scores","bio","",null,null],[0,"blosum62","bio::scores","",null,null],[5,"blosum62","bio::scores::blosum62","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[11,"new_uninitialized","nalgebra::structs::dmat","Creates an uninitialized matrix.",52,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",52,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",52,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",52,null],[11,"new_random","","Builds a matrix filled with random values.",52,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",52,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",52,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",52,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",52,null],[11,"from_fn","","Builds a matrix filled with a given constant.",52,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",52,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",52,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"to_vec","","Transforms this matrix isizeo an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",52,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",52,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",52,null],[11,"clone","","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_identity","","Builds an identity matrix.",52,{"inputs":[{"name":"usize"}],"output":{"name":"dmat"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",52,null],[11,"unsafe_at","","Just like `at` without bounds checking.",52,null],[11,"swap","","",52,null],[11,"shape","","",52,null],[11,"index","","",52,null],[11,"index_mut","","",52,null],[11,"mul","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",52,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","nalgebra::structs::dvec","",53,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","nalgebra::structs::dmat","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",52,null],[11,"mean","","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"col_slice","","",52,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",52,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",52,{"inputs":[{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"diag","","",52,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"set_diag","","",52,null],[11,"approx_epsilon","","",52,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",52,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",52,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",52,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",52,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"add","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",52,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",52,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"clone","nalgebra::structs::dvec","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",53,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",53,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",53,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",53,null],[11,"from_fn","","Builds a vector filled with the result of a function.",53,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",53,{"inputs":[{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",53,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",53,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",53,null],[11,"as_mut_slice","","Mutably slices this vector.",53,null],[11,"shape","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"swap","","",53,null],[11,"unsafe_at","","",53,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",53,null],[11,"index","","",53,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",53,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",53,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",53,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",53,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",53,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",53,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",53,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",53,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",53,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",53,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",53,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",53,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",53,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",53,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"eq","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",54,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",54,null],[11,"as_mut_slice","","Mutably slices this vector.",54,null],[11,"shape","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"swap","","",54,null],[11,"unsafe_at","","",54,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",54,null],[11,"index","","",54,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",54,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",54,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",54,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",54,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",54,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",54,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",54,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",54,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",54,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",54,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",54,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",54,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",54,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",54,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",54,null],[11,"from_fn","","Builds a vector filled with the result of a function.",54,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",54,{"inputs":[{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"eq","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",55,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",55,null],[11,"as_mut_slice","","Mutably slices this vector.",55,null],[11,"shape","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"swap","","",55,null],[11,"unsafe_at","","",55,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",55,null],[11,"index","","",55,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",55,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",55,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",55,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",55,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",55,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",55,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",55,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",55,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",55,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",55,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",55,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",55,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",55,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",55,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",55,null],[11,"from_fn","","Builds a vector filled with the result of a function.",55,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",55,{"inputs":[{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"eq","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",56,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",56,null],[11,"as_mut_slice","","Mutably slices this vector.",56,null],[11,"shape","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"swap","","",56,null],[11,"unsafe_at","","",56,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",56,null],[11,"index","","",56,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",56,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",56,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",56,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",56,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",56,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",56,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",56,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",56,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",56,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",56,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",56,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",56,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",56,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",56,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",56,null],[11,"from_fn","","Builds a vector filled with the result of a function.",56,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",56,{"inputs":[{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"eq","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",57,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",57,null],[11,"as_mut_slice","","Mutably slices this vector.",57,null],[11,"shape","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"swap","","",57,null],[11,"unsafe_at","","",57,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",57,null],[11,"index","","",57,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",57,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",57,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",57,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",57,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",57,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",57,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",57,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",57,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",57,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",57,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",57,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",57,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",57,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",57,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",57,null],[11,"from_fn","","Builds a vector filled with the result of a function.",57,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",57,{"inputs":[{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"eq","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",58,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",58,null],[11,"as_mut_slice","","Mutably slices this vector.",58,null],[11,"shape","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"swap","","",58,null],[11,"unsafe_at","","",58,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",58,null],[11,"index","","",58,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",58,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",58,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",58,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",58,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",58,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",58,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",58,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",58,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",58,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",58,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",58,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",58,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",58,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",58,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",58,null],[11,"from_fn","","Builds a vector filled with the result of a function.",58,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",58,{"inputs":[{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"eq","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",59,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",59,null],[11,"as_mut_slice","","Mutably slices this vector.",59,null],[11,"shape","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"swap","","",59,null],[11,"unsafe_at","","",59,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",59,null],[11,"index","","",59,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",59,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",59,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",59,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",59,null],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",59,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",59,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",59,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",59,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",59,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",59,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",59,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",59,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",59,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",59,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",59,null],[11,"from_fn","","Builds a vector filled with the result of a function.",59,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",59,{"inputs":[{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","nalgebra::structs::vec","",60,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",60,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",60,{"inputs":[],"output":{"name":"vec0"}}],[11,"repeat","","",60,{"inputs":[{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",61,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",61,{"inputs":[{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",61,{"inputs":[],"output":{"name":"vec1"}}],[11,"from","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_ref","","",61,null],[11,"as_mut","","",61,null],[11,"index","","",61,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",61,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"swap","","",61,null],[11,"unsafe_at","","",61,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",61,null],[11,"at_fast","","Unsafe read access to a vector element by index.",61,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",61,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",61,{"inputs":[{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",61,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",61,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",61,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",61,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",61,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"translation","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",61,null],[11,"append_translation","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",61,null],[11,"prepend_translation","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",61,null],[11,"sqnorm","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",61,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",61,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",61,{"inputs":[],"output":{"name":"vec1"}}],[11,"zero","","",61,{"inputs":[],"output":{"name":"vec1"}}],[11,"is_zero","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",61,{"inputs":[{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",61,{"inputs":[],"output":{"name":"vec1"}}],[11,"min_value","","",61,{"inputs":[],"output":{"name":"vec1"}}],[11,"axpy","","",61,null],[11,"iter","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",61,{"inputs":[{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",61,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",61,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",61,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",61,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",62,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",62,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",61,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",61,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",61,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",61,{"inputs":[{"name":"r"}],"output":{"name":"vec1"}}],[11,"fmt","","",63,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",63,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",63,{"inputs":[],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",63,{"inputs":[],"output":{"name":"vec2"}}],[11,"from","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_ref","","",63,null],[11,"as_mut","","",63,null],[11,"index","","",63,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",63,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"swap","","",63,null],[11,"unsafe_at","","",63,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",63,null],[11,"at_fast","","Unsafe read access to a vector element by index.",63,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",63,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",63,{"inputs":[{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",63,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",63,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",63,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",63,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",63,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"translation","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",63,null],[11,"append_translation","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",63,null],[11,"prepend_translation","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",63,null],[11,"sqnorm","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",63,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",63,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",63,{"inputs":[],"output":{"name":"vec2"}}],[11,"zero","","",63,{"inputs":[],"output":{"name":"vec2"}}],[11,"is_zero","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",63,{"inputs":[{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",63,{"inputs":[],"output":{"name":"vec2"}}],[11,"min_value","","",63,{"inputs":[],"output":{"name":"vec2"}}],[11,"axpy","","",63,null],[11,"iter","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",63,{"inputs":[{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",63,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",63,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",63,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",63,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",64,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",64,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",63,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",63,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",63,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",63,{"inputs":[{"name":"r"}],"output":{"name":"vec2"}}],[11,"fmt","","",65,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"clone","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",65,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"from","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_ref","","",65,null],[11,"as_mut","","",65,null],[11,"index","","",65,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",65,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"swap","","",65,null],[11,"unsafe_at","","",65,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",65,null],[11,"at_fast","","Unsafe read access to a vector element by index.",65,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",65,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",65,{"inputs":[{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",65,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",65,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",65,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",65,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",65,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"translation","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",65,null],[11,"append_translation","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",65,null],[11,"prepend_translation","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",65,null],[11,"sqnorm","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",65,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",65,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"zero","","",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"is_zero","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",65,{"inputs":[{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"min_value","","",65,{"inputs":[],"output":{"name":"vec3"}}],[11,"axpy","","",65,null],[11,"iter","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",65,{"inputs":[{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",65,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",65,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",65,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",65,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",66,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",66,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",65,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",65,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",65,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",65,{"inputs":[{"name":"r"}],"output":{"name":"vec3"}}],[11,"fmt","","",67,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",67,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"from","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_ref","","",67,null],[11,"as_mut","","",67,null],[11,"index","","",67,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",67,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"swap","","",67,null],[11,"unsafe_at","","",67,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",67,null],[11,"at_fast","","Unsafe read access to a vector element by index.",67,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",67,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",67,{"inputs":[{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",67,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",67,null],[11,"orthonormal_subspace_basis","","",67,null],[11,"canonical_basis_element","","",67,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",67,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",67,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",67,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",67,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"translation","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",67,null],[11,"append_translation","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",67,null],[11,"prepend_translation","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",67,null],[11,"sqnorm","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",67,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",67,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"zero","","",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"is_zero","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",67,{"inputs":[{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"min_value","","",67,{"inputs":[],"output":{"name":"vec4"}}],[11,"axpy","","",67,null],[11,"iter","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",67,{"inputs":[{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",67,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",67,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",67,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",67,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",68,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",68,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",67,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",67,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",67,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",67,{"inputs":[{"name":"r"}],"output":{"name":"vec4"}}],[11,"fmt","","",69,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"clone","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",69,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"from","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_ref","","",69,null],[11,"as_mut","","",69,null],[11,"index","","",69,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",69,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"swap","","",69,null],[11,"unsafe_at","","",69,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",69,null],[11,"at_fast","","Unsafe read access to a vector element by index.",69,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",69,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",69,{"inputs":[{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",69,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",69,null],[11,"orthonormal_subspace_basis","","",69,null],[11,"canonical_basis_element","","",69,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",69,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",69,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",69,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",69,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"translation","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",69,null],[11,"append_translation","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",69,null],[11,"prepend_translation","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",69,null],[11,"sqnorm","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",69,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",69,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"zero","","",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"is_zero","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",69,{"inputs":[{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"min_value","","",69,{"inputs":[],"output":{"name":"vec5"}}],[11,"axpy","","",69,null],[11,"iter","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",69,{"inputs":[{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",69,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",69,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",69,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",69,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",70,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",70,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",69,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",69,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",69,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",69,{"inputs":[{"name":"r"}],"output":{"name":"vec5"}}],[11,"fmt","","",71,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"clone","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",71,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"from","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_ref","","",71,null],[11,"as_mut","","",71,null],[11,"index","","",71,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",71,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"swap","","",71,null],[11,"unsafe_at","","",71,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",71,null],[11,"at_fast","","Unsafe read access to a vector element by index.",71,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",71,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",71,{"inputs":[{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",71,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",71,null],[11,"orthonormal_subspace_basis","","",71,null],[11,"canonical_basis_element","","",71,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",71,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",71,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",71,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",71,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"translation","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",71,null],[11,"append_translation","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",71,null],[11,"prepend_translation","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",71,null],[11,"sqnorm","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",71,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",71,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"zero","","",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"is_zero","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",71,{"inputs":[{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"min_value","","",71,{"inputs":[],"output":{"name":"vec6"}}],[11,"axpy","","",71,null],[11,"iter","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",71,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",71,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",71,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",71,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","nalgebra::structs::pnt","",72,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",72,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","nalgebra::structs::vec","",71,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",71,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",71,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",71,{"inputs":[{"name":"r"}],"output":{"name":"vec6"}}],[11,"fmt","nalgebra::structs::pnt","",73,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",73,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",73,{"inputs":[],"output":{"name":"pnt0"}}],[11,"repeat","","",73,{"inputs":[{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",62,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",62,{"inputs":[{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",62,{"inputs":[],"output":{"name":"pnt1"}}],[11,"is_orig","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",62,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",62,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",62,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",62,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_ref","","",62,null],[11,"as_mut","","",62,null],[11,"index","","",62,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",62,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"swap","","",62,null],[11,"unsafe_at","","",62,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",62,null],[11,"at_fast","","Unsafe read access to a vector element by index.",62,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",62,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",62,{"inputs":[{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",62,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",62,null],[11,"sub","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",62,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",62,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",62,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",62,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",62,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",62,{"inputs":[{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",62,{"inputs":[],"output":{"name":"pnt1"}}],[11,"min_value","","",62,{"inputs":[],"output":{"name":"pnt1"}}],[11,"axpy","","",62,null],[11,"iter","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",62,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",62,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",62,{"inputs":[{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",64,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"clone","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",64,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",64,{"inputs":[],"output":{"name":"pnt2"}}],[11,"is_orig","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",64,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",64,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",64,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",64,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_ref","","",64,null],[11,"as_mut","","",64,null],[11,"index","","",64,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",64,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"swap","","",64,null],[11,"unsafe_at","","",64,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",64,null],[11,"at_fast","","Unsafe read access to a vector element by index.",64,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",64,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",64,{"inputs":[{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",64,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",64,null],[11,"sub","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",64,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",64,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",64,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",64,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",64,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",64,{"inputs":[{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",64,{"inputs":[],"output":{"name":"pnt2"}}],[11,"min_value","","",64,{"inputs":[],"output":{"name":"pnt2"}}],[11,"axpy","","",64,null],[11,"iter","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",64,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",64,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",64,{"inputs":[{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",66,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"clone","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",66,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",66,{"inputs":[],"output":{"name":"pnt3"}}],[11,"is_orig","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",66,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",66,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",66,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",66,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_ref","","",66,null],[11,"as_mut","","",66,null],[11,"index","","",66,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",66,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"swap","","",66,null],[11,"unsafe_at","","",66,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",66,null],[11,"at_fast","","Unsafe read access to a vector element by index.",66,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",66,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",66,{"inputs":[{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",66,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",66,null],[11,"sub","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",66,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",66,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",66,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",66,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",66,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",66,{"inputs":[{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",66,{"inputs":[],"output":{"name":"pnt3"}}],[11,"min_value","","",66,{"inputs":[],"output":{"name":"pnt3"}}],[11,"axpy","","",66,null],[11,"iter","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",66,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",66,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",66,{"inputs":[{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",68,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",68,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",68,{"inputs":[],"output":{"name":"pnt4"}}],[11,"is_orig","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",68,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",68,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",68,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",68,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_ref","","",68,null],[11,"as_mut","","",68,null],[11,"index","","",68,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",68,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"swap","","",68,null],[11,"unsafe_at","","",68,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",68,null],[11,"at_fast","","Unsafe read access to a vector element by index.",68,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",68,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",68,{"inputs":[{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",68,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",68,null],[11,"sub","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",68,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",68,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",68,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",68,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",68,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",68,{"inputs":[{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",68,{"inputs":[],"output":{"name":"pnt4"}}],[11,"min_value","","",68,{"inputs":[],"output":{"name":"pnt4"}}],[11,"axpy","","",68,null],[11,"iter","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",68,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",68,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",68,{"inputs":[{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",70,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"clone","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",70,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",70,{"inputs":[],"output":{"name":"pnt5"}}],[11,"is_orig","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",70,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",70,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",70,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",70,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_ref","","",70,null],[11,"as_mut","","",70,null],[11,"index","","",70,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",70,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"swap","","",70,null],[11,"unsafe_at","","",70,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",70,null],[11,"at_fast","","Unsafe read access to a vector element by index.",70,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",70,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",70,{"inputs":[{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",70,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",70,null],[11,"sub","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",70,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",70,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",70,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",70,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",70,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",70,{"inputs":[{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",70,{"inputs":[],"output":{"name":"pnt5"}}],[11,"min_value","","",70,{"inputs":[],"output":{"name":"pnt5"}}],[11,"axpy","","",70,null],[11,"iter","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",70,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",70,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",70,{"inputs":[{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",72,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"clone","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",72,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",72,{"inputs":[],"output":{"name":"pnt6"}}],[11,"is_orig","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",72,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",72,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",72,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",72,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_ref","","",72,null],[11,"as_mut","","",72,null],[11,"index","","",72,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",72,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"swap","","",72,null],[11,"unsafe_at","","",72,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",72,null],[11,"at_fast","","Unsafe read access to a vector element by index.",72,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",72,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",72,{"inputs":[{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",72,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",72,null],[11,"sub","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",72,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",72,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",72,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",72,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",72,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",72,{"inputs":[],"output":{"name":"pnt6"}}],[11,"min_value","","",72,{"inputs":[],"output":{"name":"pnt6"}}],[11,"axpy","","",72,null],[11,"iter","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",72,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",72,{"inputs":[{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","nalgebra::structs::quat","",74,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"clone","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",74,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",74,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",74,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",74,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",74,null],[11,"inv","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"rand","","",74,{"inputs":[{"name":"r"}],"output":{"name":"quat"}}],[11,"fmt","","",75,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"clone","","",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",75,{"inputs":[{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",75,{"inputs":[{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",75,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",75,{"inputs":[{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",75,{"inputs":[],"output":{"name":"unitquat"}}],[11,"inv","","",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",75,{"inputs":[{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",75,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",75,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",75,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::vec","",65,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::pnt","",66,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","nalgebra::structs::quat","",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",75,null],[11,"append_rotation","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",75,null],[11,"prepend_rotation","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",75,null],[11,"to_rot_mat","","",75,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rotate","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",75,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",75,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"angle_to","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"n"}}],[11,"rotation_to","","",75,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"transform","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",75,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",75,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",75,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",74,{"inputs":[],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",74,{"inputs":[],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",74,{"inputs":[],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",74,{"inputs":[],"output":{"name":"quat"}}],[11,"from","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_ref","","",74,null],[11,"as_mut","","",74,null],[11,"index","","",74,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",74,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"swap","","",74,null],[11,"unsafe_at","","",74,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",74,null],[11,"at_fast","","Unsafe read access to a vector element by index.",74,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",74,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",74,{"inputs":[{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",74,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",74,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",74,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",74,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",74,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"one","","",74,{"inputs":[],"output":{"name":"quat"}}],[11,"zero","","",74,{"inputs":[],"output":{"name":"quat"}}],[11,"is_zero","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",74,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",74,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",74,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",74,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",74,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",74,{"inputs":[{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",74,{"inputs":[],"output":{"name":"quat"}}],[11,"min_value","","",74,{"inputs":[],"output":{"name":"quat"}}],[11,"axpy","","",74,null],[11,"iter","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",74,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",75,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","nalgebra::structs::mat","",76,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,{"inputs":[{"name":"identity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",76,{"inputs":[],"output":{"name":"identity"}}],[11,"fmt","","",77,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"clone","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",77,{"inputs":[{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",77,{"inputs":[{"name":"n"}],"output":{"name":"mat1"}}],[11,"repeat","","",77,{"inputs":[{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_ref","","",77,null],[11,"as_mut","","",77,null],[11,"from","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",77,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",77,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",77,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",77,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",77,{"inputs":[],"output":{"name":"mat1"}}],[11,"is_zero","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",77,{"inputs":[],"output":{"name":"mat1"}}],[11,"iter","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",77,null],[11,"set_fast","","",77,null],[11,"dim","","",77,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",77,null],[11,"swap","","",77,null],[11,"unsafe_at","","",77,null],[11,"unsafe_set","","",77,null],[11,"index","","",77,null],[11,"index_mut","","",77,null],[11,"mul","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",77,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","nalgebra::structs::vec","",61,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","nalgebra::structs::mat","",77,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","nalgebra::structs::pnt","",62,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","nalgebra::structs::mat","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",77,null],[11,"approx_epsilon","","",77,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",77,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",77,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",77,null],[11,"row","","",77,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",77,null],[11,"col","","",77,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",77,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",77,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",77,{"inputs":[{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"diag","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"set_diag","","",77,null],[11,"to_homogeneous","","",77,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",77,{"inputs":[{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","nalgebra::structs::vec","",61,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","nalgebra::structs::mat","",77,null],[11,"rand","","",77,{"inputs":[{"name":"r"}],"output":{"name":"mat1"}}],[11,"fmt","","",78,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"clone","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",78,{"inputs":[{"name":"usize"}],"output":{"name":"mat2"}}],[11,"new","","",78,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"repeat","","",78,{"inputs":[{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_ref","","",78,null],[11,"as_mut","","",78,null],[11,"from","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",78,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",78,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",78,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",78,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",78,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",78,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",78,{"inputs":[],"output":{"name":"mat2"}}],[11,"is_zero","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",78,{"inputs":[],"output":{"name":"mat2"}}],[11,"iter","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",78,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",78,null],[11,"swap","","",78,null],[11,"unsafe_at","","",78,null],[11,"unsafe_set","","",78,null],[11,"index","","",78,null],[11,"index_mut","","",78,null],[11,"at_fast","","",78,null],[11,"set_fast","","",78,null],[11,"transpose","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",78,null],[11,"approx_epsilon","","",78,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",78,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",78,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",78,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",78,null],[11,"row","","",78,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",78,null],[11,"col","","",78,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",78,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",78,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",78,{"inputs":[{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"diag","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"set_diag","","",78,null],[11,"to_homogeneous","","",78,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",78,{"inputs":[{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","nalgebra::structs::vec","",63,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","nalgebra::structs::mat","",78,null],[11,"rand","","",78,{"inputs":[{"name":"r"}],"output":{"name":"mat2"}}],[11,"fmt","","",79,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"clone","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",79,{"inputs":[{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",79,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"repeat","","",79,{"inputs":[{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_ref","","",79,null],[11,"as_mut","","",79,null],[11,"from","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",79,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",79,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",79,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",79,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",79,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",79,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",79,{"inputs":[],"output":{"name":"mat3"}}],[11,"is_zero","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",79,{"inputs":[],"output":{"name":"mat3"}}],[11,"iter","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",79,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",79,null],[11,"swap","","",79,null],[11,"unsafe_at","","",79,null],[11,"unsafe_set","","",79,null],[11,"index","","",79,null],[11,"index_mut","","",79,null],[11,"at_fast","","",79,null],[11,"set_fast","","",79,null],[11,"transpose","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",79,null],[11,"approx_epsilon","","",79,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",79,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",79,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",79,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",79,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",79,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",79,{"inputs":[{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"diag","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"set_diag","","",79,null],[11,"to_homogeneous","","",79,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",79,{"inputs":[{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","nalgebra::structs::vec","",65,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","nalgebra::structs::mat","",79,null],[11,"rand","","",79,{"inputs":[{"name":"r"}],"output":{"name":"mat3"}}],[11,"fmt","","",80,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"clone","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",80,{"inputs":[{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",80,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"repeat","","",80,{"inputs":[{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_ref","","",80,null],[11,"as_mut","","",80,null],[11,"from","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",80,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",80,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",80,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",80,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",80,{"inputs":[],"output":{"name":"mat4"}}],[11,"is_zero","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",80,{"inputs":[],"output":{"name":"mat4"}}],[11,"iter","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",80,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",80,null],[11,"swap","","",80,null],[11,"unsafe_at","","",80,null],[11,"unsafe_set","","",80,null],[11,"index","","",80,null],[11,"index_mut","","",80,null],[11,"at_fast","","",80,null],[11,"set_fast","","",80,null],[11,"mul","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",80,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::vec","",67,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::mat","",80,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","nalgebra::structs::pnt","",68,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","nalgebra::structs::mat","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",80,null],[11,"approx_epsilon","","",80,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",80,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",80,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",80,null],[11,"row","","",80,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",80,null],[11,"col","","",80,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",80,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",80,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",80,{"inputs":[{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"diag","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"set_diag","","",80,null],[11,"to_homogeneous","","",80,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",80,{"inputs":[{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","nalgebra::structs::vec","",67,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","nalgebra::structs::mat","",80,null],[11,"rand","","",80,{"inputs":[{"name":"r"}],"output":{"name":"mat4"}}],[11,"fmt","","",81,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"clone","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",81,{"inputs":[{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",81,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"repeat","","",81,{"inputs":[{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_ref","","",81,null],[11,"as_mut","","",81,null],[11,"from","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",81,{"inputs":[],"output":{"name":"mat5"}}],[11,"is_zero","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",81,{"inputs":[],"output":{"name":"mat5"}}],[11,"add","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",81,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",81,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",81,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",81,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",81,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",81,null],[11,"swap","","",81,null],[11,"unsafe_at","","",81,null],[11,"unsafe_set","","",81,null],[11,"index","","",81,null],[11,"index_mut","","",81,null],[11,"at_fast","","",81,null],[11,"set_fast","","",81,null],[11,"mul","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",81,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","nalgebra::structs::vec","",69,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","nalgebra::structs::mat","",81,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","nalgebra::structs::pnt","",70,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","nalgebra::structs::mat","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",81,null],[11,"approx_epsilon","","",81,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",81,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",81,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",81,null],[11,"row","","",81,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",81,null],[11,"col","","",81,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",81,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",81,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",81,{"inputs":[{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"diag","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"set_diag","","",81,null],[11,"to_homogeneous","","",81,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",81,{"inputs":[{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","nalgebra::structs::vec","",69,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","nalgebra::structs::mat","",81,null],[11,"rand","","",81,{"inputs":[{"name":"r"}],"output":{"name":"mat5"}}],[11,"fmt","","",82,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"clone","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",82,{"inputs":[{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",82,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"repeat","","",82,{"inputs":[{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_ref","","",82,null],[11,"as_mut","","",82,null],[11,"from","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",82,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",82,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",82,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",82,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",82,{"inputs":[],"output":{"name":"mat6"}}],[11,"is_zero","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",82,{"inputs":[],"output":{"name":"mat6"}}],[11,"iter","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",82,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",82,null],[11,"swap","","",82,null],[11,"unsafe_at","","",82,null],[11,"unsafe_set","","",82,null],[11,"index","","",82,null],[11,"index_mut","","",82,null],[11,"at_fast","","",82,null],[11,"set_fast","","",82,null],[11,"mul","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",82,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","nalgebra::structs::vec","",71,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","nalgebra::structs::mat","",82,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","nalgebra::structs::pnt","",72,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","nalgebra::structs::mat","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",82,null],[11,"approx_epsilon","","",82,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",82,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",82,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",82,null],[11,"row","","",82,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",82,null],[11,"col","","",82,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",82,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",82,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",82,{"inputs":[{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"diag","","",82,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"set_diag","","",82,null],[11,"outer","nalgebra::structs::vec","",71,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","nalgebra::structs::mat","",82,null],[11,"rand","","",82,{"inputs":[{"name":"r"}],"output":{"name":"mat6"}}],[11,"hash","nalgebra::structs::rot","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",83,{"inputs":[{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",83,null],[11,"append_rotation","","",83,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",83,null],[11,"prepend_rotation","","",83,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",83,null],[11,"angle_to","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"n"}}],[11,"rotation_to","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"rand","","",83,{"inputs":[{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",83,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",84,{"inputs":[{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",84,{"inputs":[{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",84,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Create a new matrix and orient it such that its local `x` axis points to a given point.\nNote that the usually known `look_at` function does the same thing but with the `z` axis.\nSee `look_at_z` for that.",84,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"look_at_z","","Create a new matrix and orient it such that its local `z` axis points to a given point.",84,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"rotation","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",84,null],[11,"append_rotation","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",84,null],[11,"prepend_rotation","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",84,null],[11,"angle_to","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"n"}}],[11,"rotation_to","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"rand","","",84,{"inputs":[{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",85,null],[11,"append_rotation","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",85,null],[11,"prepend_rotation","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",85,null],[11,"submat","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",83,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",83,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",83,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",83,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",83,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",83,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",83,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",83,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",83,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",83,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","nalgebra::structs::vec","",63,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","nalgebra::structs::rot","",83,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","nalgebra::structs::pnt","",64,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","nalgebra::structs::rot","",83,{"inputs":[],"output":{"name":"rot2"}}],[11,"new_identity","","",83,{"inputs":[{"name":"usize"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",83,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",83,null],[11,"nrows","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",83,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",83,null],[11,"index","","",83,null],[11,"abs","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",83,null],[11,"approx_epsilon","","",83,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",83,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",83,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",83,{"inputs":[{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"diag","","",83,{"inputs":[{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"submat","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",84,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",84,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",84,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",84,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",84,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",84,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::vec","",65,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","nalgebra::structs::rot","",84,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::pnt","",66,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","nalgebra::structs::rot","",84,{"inputs":[],"output":{"name":"rot3"}}],[11,"new_identity","","",84,{"inputs":[{"name":"usize"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",84,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",84,null],[11,"nrows","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",84,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",84,null],[11,"index","","",84,null],[11,"abs","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",84,null],[11,"approx_epsilon","","",84,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",84,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",84,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",84,{"inputs":[{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"diag","","",84,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"submat","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",85,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",85,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",85,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",85,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",85,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",85,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",85,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::vec","",67,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","nalgebra::structs::rot","",85,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","nalgebra::structs::pnt","",68,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","nalgebra::structs::rot","",85,{"inputs":[],"output":{"name":"rot4"}}],[11,"new_identity","","",85,{"inputs":[{"name":"usize"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",85,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",85,null],[11,"nrows","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",85,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",85,null],[11,"index","","",85,null],[11,"abs","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",85,null],[11,"approx_epsilon","","",85,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",85,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",85,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",85,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",85,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",85,{"inputs":[{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"diag","","",85,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"fmt","nalgebra::structs::iso","",86,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",87,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",87,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",88,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",86,{"inputs":[{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",86,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",86,null],[11,"append_rotation","","",86,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",86,null],[11,"prepend_rotation","","",86,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",86,null],[11,"dim","","",86,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",86,{"inputs":[],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",86,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",86,{"inputs":[{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",86,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",86,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",86,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",86,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",86,null],[11,"append_transformation","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",86,null],[11,"prepend_transformation","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",86,null],[11,"rotate","","",86,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",86,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",86,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",86,null],[11,"append_translation","","",86,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",86,null],[11,"prepend_translation","","",86,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",86,null],[11,"translate","","",86,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",86,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",86,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",86,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","nalgebra::structs::pnt","",64,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","nalgebra::structs::iso","Creates a new isometry from a rotation matrix and a vector.",87,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",87,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",87,null],[11,"append_rotation","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",87,null],[11,"prepend_rotation","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",87,null],[11,"dim","","",87,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",87,{"inputs":[],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",87,{"inputs":[{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",87,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",87,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",87,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",87,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",87,null],[11,"append_transformation","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",87,null],[11,"prepend_transformation","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",87,null],[11,"rotate","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",87,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",87,null],[11,"append_translation","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",87,null],[11,"prepend_translation","","",87,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",87,null],[11,"translate","","",87,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",87,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",87,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",87,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","nalgebra::structs::pnt","",66,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","nalgebra::structs::iso","",88,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",88,{"inputs":[],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",88,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",88,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",88,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",88,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",88,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",88,null],[11,"append_transformation","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",88,null],[11,"prepend_transformation","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",88,null],[11,"rotate","","",88,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",88,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",88,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",88,null],[11,"append_translation","","",88,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",88,null],[11,"prepend_translation","","",88,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",88,null],[11,"translate","","",88,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",88,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",88,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",88,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","nalgebra::structs::pnt","",68,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","nalgebra::structs::persp","",89,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",89,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",89,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",89,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",89,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",89,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",89,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",89,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",89,null],[11,"set_fov","","Sets the field of view of the view frustrum.",89,null],[11,"set_znear","","Sets the near plane offset of the view frustrum.",89,null],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",89,null],[11,"project_pnt","","Projects a point.",89,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",89,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",90,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",90,{"inputs":[{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",90,null],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",90,null],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",90,null],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",90,null],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",90,null],[11,"project_pnt","","Projects a point.",90,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",90,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",90,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","nalgebra::structs::ortho","",91,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",91,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",91,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",91,null],[11,"set_height","","Sets the height of the view cuboid.",91,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",91,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",91,null],[11,"project_pnt","","Projects a point.",91,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",91,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",92,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",92,{"inputs":[{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",92,null],[11,"set_height","","Sets the height of the view cuboid.",92,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",92,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",92,null],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",92,null],[11,"project_pnt","","Projects a point.",92,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",92,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",92,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"fmt","nalgebra::traits::operations","",93,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",93,{"inputs":[{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",93,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[0,"pam40","bio::scores","",null,null],[5,"pam40","bio::scores::pam40","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam120","bio::scores","",null,null],[5,"pam120","bio::scores::pam120","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam200","bio::scores","",null,null],[5,"pam200","bio::scores::pam200","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}],[0,"pam250","bio::scores","",null,null],[5,"pam250","bio::scores::pam250","",null,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"i32"}}]],"paths":[[3,"NonNaNFloat"],[3,"Alphabet"],[3,"RankTransform"],[3,"RevComp"],[3,"QGrams"],[3,"ShiftAnd"],[3,"Matches"],[3,"KMP"],[3,"Matches"],[3,"BOM"],[3,"Matches"],[3,"Horspool"],[3,"Matches"],[3,"BNDM"],[3,"Matches"],[3,"Ukkonen"],[3,"Matches"],[3,"Myers"],[3,"Matches"],[3,"RankSelect"],[3,"Occ"],[3,"BitEnc"],[3,"BitEncIter"],[3,"SmallInts"],[3,"Iter"],[3,"Interval"],[3,"FMIndex"],[3,"BiInterval"],[3,"FMDIndex"],[3,"Interval"],[3,"Match"],[3,"ExactMatch"],[3,"QGramIndex"],[3,"Alignment"],[4,"AlignmentOperation"],[3,"Aligner"],[3,"Reader"],[3,"Record"],[3,"Records"],[3,"Writer"],[3,"IndexedReader"],[3,"Sequence"],[3,"Reader"],[3,"Index"],[3,"Writer"],[3,"Record"],[3,"Records"],[4,"Strand"],[3,"Reader"],[3,"Records"],[3,"Writer"],[3,"Record"],[3,"DMat"],[3,"DVec"],[3,"DVec1"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DVec5"],[3,"DVec6"],[3,"Vec0"],[3,"Vec1"],[3,"Pnt1"],[3,"Vec2"],[3,"Pnt2"],[3,"Vec3"],[3,"Pnt3"],[3,"Vec4"],[3,"Pnt4"],[3,"Vec5"],[3,"Pnt5"],[3,"Vec6"],[3,"Pnt6"],[3,"Pnt0"],[3,"Quat"],[3,"UnitQuat"],[3,"Identity"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[4,"POrdering"]]};
searchIndex["nalgebra"] = {"doc":"# nalgebra","items":[[3,"Identity","nalgebra","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMat","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DVec","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Iso2","","Two dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Iso3","","Three dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Iso4","","Four dimensional isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",3,null],[12,"translation","","The translation applicable by this isometry.",3,null],[3,"Mat1","","Square matrix of dimension 1.",null,null],[12,"m11","","",4,null],[3,"Mat2","","Square matrix of dimension 2.",null,null],[12,"m11","","",5,null],[12,"m21","","",5,null],[12,"m12","","",5,null],[12,"m22","","",5,null],[3,"Mat3","","Square matrix of dimension 3.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m31","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[12,"m32","","",6,null],[12,"m13","","",6,null],[12,"m23","","",6,null],[12,"m33","","",6,null],[3,"Mat4","","Square matrix of dimension 4.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m41","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m42","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[12,"m43","","",7,null],[12,"m14","","",7,null],[12,"m24","","",7,null],[12,"m34","","",7,null],[12,"m44","","",7,null],[3,"Mat5","","Square matrix of dimension 5.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m51","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m52","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m53","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[12,"m54","","",8,null],[12,"m15","","",8,null],[12,"m25","","",8,null],[12,"m35","","",8,null],[12,"m45","","",8,null],[12,"m55","","",8,null],[3,"Mat6","","Square matrix of dimension 6.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m61","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m62","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m63","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m64","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[12,"m65","","",9,null],[12,"m16","","",9,null],[12,"m26","","",9,null],[12,"m36","","",9,null],[12,"m46","","",9,null],[12,"m56","","",9,null],[12,"m66","","",9,null],[3,"Rot2","","Two dimensional rotation matrix.",null,null],[3,"Rot3","","Three dimensional rotation matrix.",null,null],[3,"Rot4","","Four dimensional rotation matrix.",null,null],[3,"Vec0","","Vector of dimension 0.",null,null],[3,"Vec1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",10,null],[3,"Vec2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",11,null],[12,"y","","Second component of the vector.",11,null],[3,"Vec3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[12,"z","","Third component of the vector.",12,null],[3,"Vec4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[12,"w","","Fourth component of the vector.",13,null],[3,"Vec5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[12,"a","","Fifth of the vector.",14,null],[3,"Vec6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[12,"b","","Sixth component of the vector.",15,null],[3,"Pnt0","","Point of dimension 0.",null,null],[3,"Pnt1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",16,null],[3,"Pnt2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",17,null],[12,"y","","Second component of the point.",17,null],[3,"Pnt3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[12,"z","","Third component of the point.",18,null],[3,"Pnt4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[12,"w","","Fourth component of the point.",19,null],[3,"Pnt5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[12,"a","","Fifth of the point.",20,null],[3,"Pnt6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[12,"b","","Sixth component of the point.",21,null],[3,"Persp3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspMat3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Ortho3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quat","","A quaternion.",null,null],[12,"w","","The scalar component of the quaternion.",22,null],[12,"i","","The first vector component of the quaternion.",22,null],[12,"j","","The second vector component of the quaternion.",22,null],[12,"k","","The third vector component of the quaternion.",22,null],[3,"UnitQuat","","A unit quaternion that can represent a 3D rotation.",null,null],[4,"POrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",23,null],[13,"PartialEqual","","Equality relationship.",23,null],[13,"PartialGreater","","Result of a strict comparison.",23,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",23,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"hessenberg","","Hessenberg\nReturns the matrix m in Hessenberg form and the corresponding similarity transformation",null,null],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"pordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a &lt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a &lt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a &gt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a &gt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"orig","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"dist","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"sqdist","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inv_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inv_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"angletype"}}],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"deltarotationtype"}}],[5,"to_rot_mat","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inv_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inv_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"sqnorm","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"det","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"crossproducttype"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inv","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"outerproducttype"}}],[5,"cov","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diag","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dim","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"clone","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"eq","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized matrix.",24,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_zeros","","Builds a matrix filled with zeros.",24,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"reset","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"new_random","","Builds a matrix filled with random values.",24,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmat"}}],[11,"from_elem","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24,null],[11,"from_fn","","Builds a matrix filled with a given constant.",24,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmat"}}],[11,"nrows","","The number of row on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"ncols","","The number of columns on the matrix.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"usize"}}],[11,"to_vec","","Transforms this matrix isizeo an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",24,{"inputs":[{"name":"dmat"}],"output":{"name":"vec"}}],[11,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24,null],[11,"new_identity","","Builds an identity matrix.",24,{"inputs":[{"name":"usize"}],"output":{"name":"dmat"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",24,null],[11,"unsafe_at","","Just like `at` without bounds checking.",24,null],[11,"swap","","",24,null],[11,"shape","","",24,null],[11,"index","","",24,null],[11,"index_mut","","",24,null],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"inv","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"option"}}],[11,"inv_mut","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"bool"}}],[11,"transpose","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"transpose_mut","","",24,{"inputs":[{"name":"dmat"}],"output":null}],[11,"mean","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"cov","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"col_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"row_slice","","",24,{"inputs":[{"name":"dmat"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_diag","","",24,{"inputs":[{"name":"dvec"}],"output":{"name":"dmat"}}],[11,"diag","","",24,{"inputs":[{"name":"dmat"}],"output":{"name":"dvec"}}],[11,"approx_epsilon","","",24,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",24,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"dmat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"div","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"add","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"n"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"sub","","",24,{"inputs":[{"name":"dmat"},{"name":"dmat"}],"output":{"name":"dmat"}}],[11,"clone","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"fmt","","",0,{"inputs":[{"name":"dvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"bool"}}],[11,"new_uninitialized","","Creates an uninitialized vec.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"from_elem","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the result of a function.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec"}}],[11,"len","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"dvec"}}],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",0,null],[11,"as_mut_slice","","Mutably slices this vector.",0,null],[11,"shape","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"usize"}}],[11,"swap","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",0,{"inputs":[{"name":"dvec"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvec"}}],[11,"iter","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"itermut"}}],[11,"axpy","","",0,{"inputs":[{"name":"dvec"},{"name":"n"},{"name":"dvec"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,{"inputs":[{"name":"dvec"}],"output":{"name":"vec"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"neg","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"dot","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"}],"output":{"name":"n"}}],[11,"sqnorm","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"normalize","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"dvec"}}],[11,"normalize_mut","","",0,{"inputs":[{"name":"dvec"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",0,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",0,{"inputs":[{"name":"dvec"},{"name":"dvec"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"div","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"add","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"sub","","",0,{"inputs":[{"name":"dvec"},{"name":"n"}],"output":{"name":"dvec"}}],[11,"len","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"eq","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"new_zeros","","Builds a vector filled with zeros.",25,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",25,null],[11,"as_mut_slice","","Mutably slices this vector.",25,null],[11,"shape","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"usize"}}],[11,"swap","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",25,{"inputs":[{"name":"dvec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",25,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"new_random","","Builds a vector filled with random values.",25,{"inputs":[{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"iter","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"itermut"}}],[11,"axpy","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"},{"name":"dvec1"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",25,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"vec"}}],[11,"mul","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"div","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"add","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"sub","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"neg","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"dot","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"}],"output":{"name":"n"}}],[11,"sqnorm","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"normalize","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"dvec1"}}],[11,"normalize_mut","","",25,{"inputs":[{"name":"dvec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",25,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",25,{"inputs":[{"name":"dvec1"},{"name":"dvec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"div","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"add","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"sub","","",25,{"inputs":[{"name":"dvec1"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_elem","","Builds a vector filled with a constant.",25,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",25,null],[11,"from_fn","","Builds a vector filled with the result of a function.",25,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec1"}}],[11,"from_iter","","",25,{"inputs":[{"name":"i"}],"output":{"name":"dvec1"}}],[11,"len","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"eq","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"new_zeros","","Builds a vector filled with zeros.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",26,null],[11,"as_mut_slice","","Mutably slices this vector.",26,null],[11,"shape","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"usize"}}],[11,"swap","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",26,{"inputs":[{"name":"dvec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"new_random","","Builds a vector filled with random values.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"iter","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"itermut"}}],[11,"axpy","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"},{"name":"dvec2"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"vec"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"div","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"add","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"neg","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"dot","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"}],"output":{"name":"n"}}],[11,"sqnorm","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"normalize","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"dvec2"}}],[11,"normalize_mut","","",26,{"inputs":[{"name":"dvec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",26,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",26,{"inputs":[{"name":"dvec2"},{"name":"dvec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"div","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"add","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"sub","","",26,{"inputs":[{"name":"dvec2"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_elem","","Builds a vector filled with a constant.",26,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",26,null],[11,"from_fn","","Builds a vector filled with the result of a function.",26,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec2"}}],[11,"from_iter","","",26,{"inputs":[{"name":"i"}],"output":{"name":"dvec2"}}],[11,"len","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"eq","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"new_zeros","","Builds a vector filled with zeros.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",27,null],[11,"as_mut_slice","","Mutably slices this vector.",27,null],[11,"shape","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"usize"}}],[11,"swap","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",27,{"inputs":[{"name":"dvec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"new_random","","Builds a vector filled with random values.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"iter","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"itermut"}}],[11,"axpy","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"},{"name":"dvec3"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"vec"}}],[11,"mul","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"div","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"add","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"sub","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"neg","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"dot","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"}],"output":{"name":"n"}}],[11,"sqnorm","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"normalize","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"dvec3"}}],[11,"normalize_mut","","",27,{"inputs":[{"name":"dvec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",27,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",27,{"inputs":[{"name":"dvec3"},{"name":"dvec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"div","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"add","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"sub","","",27,{"inputs":[{"name":"dvec3"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_elem","","Builds a vector filled with a constant.",27,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27,null],[11,"from_fn","","Builds a vector filled with the result of a function.",27,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec3"}}],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"dvec3"}}],[11,"len","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"eq","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"new_zeros","","Builds a vector filled with zeros.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",28,null],[11,"as_mut_slice","","Mutably slices this vector.",28,null],[11,"shape","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"usize"}}],[11,"swap","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",28,{"inputs":[{"name":"dvec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"new_random","","Builds a vector filled with random values.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"iter","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"itermut"}}],[11,"axpy","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"},{"name":"dvec4"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"vec"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"neg","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"dot","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"}],"output":{"name":"n"}}],[11,"sqnorm","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"normalize","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"dvec4"}}],[11,"normalize_mut","","",28,{"inputs":[{"name":"dvec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",28,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",28,{"inputs":[{"name":"dvec4"},{"name":"dvec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"div","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"add","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"sub","","",28,{"inputs":[{"name":"dvec4"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_elem","","Builds a vector filled with a constant.",28,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",28,null],[11,"from_fn","","Builds a vector filled with the result of a function.",28,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec4"}}],[11,"from_iter","","",28,{"inputs":[{"name":"i"}],"output":{"name":"dvec4"}}],[11,"len","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"eq","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"new_zeros","","Builds a vector filled with zeros.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",29,null],[11,"as_mut_slice","","Mutably slices this vector.",29,null],[11,"shape","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"usize"}}],[11,"swap","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",29,{"inputs":[{"name":"dvec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"new_random","","Builds a vector filled with random values.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"iter","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"itermut"}}],[11,"axpy","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"},{"name":"dvec5"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"vec"}}],[11,"mul","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"div","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"add","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"sub","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"neg","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"dot","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"}],"output":{"name":"n"}}],[11,"sqnorm","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"normalize","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"dvec5"}}],[11,"normalize_mut","","",29,{"inputs":[{"name":"dvec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",29,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",29,{"inputs":[{"name":"dvec5"},{"name":"dvec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"div","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"add","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"sub","","",29,{"inputs":[{"name":"dvec5"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_elem","","Builds a vector filled with a constant.",29,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29,null],[11,"from_fn","","Builds a vector filled with the result of a function.",29,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec5"}}],[11,"from_iter","","",29,{"inputs":[{"name":"i"}],"output":{"name":"dvec5"}}],[11,"len","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"eq","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"new_zeros","","Builds a vector filled with zeros.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"bool"}}],[11,"as_slice","","Slices this vector.",30,null],[11,"as_mut_slice","","Mutably slices this vector.",30,null],[11,"shape","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"usize"}}],[11,"swap","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"index","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",30,{"inputs":[{"name":"dvec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"new_ones","","Builds a vector filled with ones.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"new_random","","Builds a vector filled with random values.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"iter","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"itermut"}}],[11,"axpy","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"},{"name":"dvec6"}],"output":null}],[11,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"vec"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"div","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"add","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"neg","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"dot","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"}],"output":{"name":"n"}}],[11,"sqnorm","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"normalize","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"dvec6"}}],[11,"normalize_mut","","",30,{"inputs":[{"name":"dvec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",30,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",30,{"inputs":[{"name":"dvec6"},{"name":"dvec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"mul","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"div","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"add","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"sub","","",30,{"inputs":[{"name":"dvec6"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_elem","","Builds a vector filled with a constant.",30,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvec6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",30,null],[11,"from_fn","","Builds a vector filled with the result of a function.",30,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvec6"}}],[11,"from_iter","","",30,{"inputs":[{"name":"i"}],"output":{"name":"dvec6"}}],[11,"fmt","","",31,{"inputs":[{"name":"vec0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"vec0"}],"output":{"name":"vec0"}}],[11,"eq","","",31,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"vec0"},{"name":"vec0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",31,{"inputs":[],"output":{"name":"vec0"}}],[11,"repeat","","",31,{"inputs":[{"name":"n"}],"output":{"name":"vec0"}}],[11,"fmt","","",10,{"inputs":[{"name":"vec1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"vec1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",10,{"inputs":[{"name":"n"}],"output":{"name":"vec1"}}],[11,"inf","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sup","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_le","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",10,{"inputs":[],"output":{"name":"vec1"}}],[11,"from","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"as_ref","","",10,null],[11,"as_mut","","",10,null],[11,"index","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"swap","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",10,{"inputs":[{"name":"vec1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",10,{"inputs":[{"name":"n"}],"output":{"name":"vec1"}}],[11,"dim","","",10,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"usize"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"add","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"sub","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"div","","",10,{"inputs":[{"name":"vec1"},{"name":"n"}],"output":{"name":"vec1"}}],[11,"neg","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"dot","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"n"}}],[11,"translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"inv_translation","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"append_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"append_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"prepend_translation_mut","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"prepend_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"set_translation","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":null}],[11,"sqnorm","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"normalize","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"normalize_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",10,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",10,{"inputs":[],"output":{"name":"vec1"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"vec1"}}],[11,"is_zero","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"bool"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"vec1"}}],[11,"max_value","","",10,{"inputs":[],"output":{"name":"vec1"}}],[11,"min_value","","",10,{"inputs":[],"output":{"name":"vec1"}}],[11,"axpy","","",10,{"inputs":[{"name":"vec1"},{"name":"n"},{"name":"vec1"}],"output":null}],[11,"iter","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec2"}}],[11,"from","","",10,{"inputs":[{"name":"vec2"}],"output":{"name":"vec1"}}],[11,"translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_translate","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",10,{"inputs":[{"name":"vec1"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",16,{"inputs":[{"name":"pnt1"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"inv_transform","","",10,{"inputs":[{"name":"vec1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"to_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"as_pnt","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"abs","","",10,{"inputs":[{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"vec1"}}],[11,"fmt","","",11,{"inputs":[{"name":"vec2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"vec2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",11,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"inf","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sup","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_le","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[],"output":{"name":"vec2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[],"output":{"name":"vec2"}}],[11,"from","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"index","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"swap","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",11,{"inputs":[{"name":"vec2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",11,{"inputs":[{"name":"n"}],"output":{"name":"vec2"}}],[11,"dim","","",11,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"usize"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"add","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"sub","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"div","","",11,{"inputs":[{"name":"vec2"},{"name":"n"}],"output":{"name":"vec2"}}],[11,"neg","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"dot","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"n"}}],[11,"translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"prepend_translation_mut","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"set_translation","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":null}],[11,"sqnorm","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"normalize","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"normalize_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",11,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",11,{"inputs":[],"output":{"name":"vec2"}}],[11,"zero","","",11,{"inputs":[],"output":{"name":"vec2"}}],[11,"is_zero","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"bool"}}],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"vec2"}}],[11,"max_value","","",11,{"inputs":[],"output":{"name":"vec2"}}],[11,"min_value","","",11,{"inputs":[],"output":{"name":"vec2"}}],[11,"axpy","","",11,{"inputs":[{"name":"vec2"},{"name":"n"},{"name":"vec2"}],"output":null}],[11,"iter","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec3"}}],[11,"from","","",11,{"inputs":[{"name":"vec3"}],"output":{"name":"vec2"}}],[11,"translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",11,{"inputs":[{"name":"vec2"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",17,{"inputs":[{"name":"pnt2"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",11,{"inputs":[{"name":"vec2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"to_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"as_pnt","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"abs","","",11,{"inputs":[{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"vec2"}}],[11,"fmt","","",12,{"inputs":[{"name":"vec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"vec3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",12,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"inf","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sup","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_le","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"from","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"index","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"swap","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",12,{"inputs":[{"name":"vec3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",12,{"inputs":[{"name":"n"}],"output":{"name":"vec3"}}],[11,"dim","","",12,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"usize"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"add","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"sub","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"div","","",12,{"inputs":[{"name":"vec3"},{"name":"n"}],"output":{"name":"vec3"}}],[11,"neg","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"dot","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"n"}}],[11,"translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"prepend_translation_mut","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"set_translation","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":null}],[11,"sqnorm","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"normalize","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"normalize_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",12,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"is_zero","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"bool"}}],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"vec3"}}],[11,"max_value","","",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"min_value","","",12,{"inputs":[],"output":{"name":"vec3"}}],[11,"axpy","","",12,{"inputs":[{"name":"vec3"},{"name":"n"},{"name":"vec3"}],"output":null}],[11,"iter","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec4"}}],[11,"from","","",12,{"inputs":[{"name":"vec4"}],"output":{"name":"vec3"}}],[11,"translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",12,{"inputs":[{"name":"vec3"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",18,{"inputs":[{"name":"pnt3"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",12,{"inputs":[{"name":"vec3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"to_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"as_pnt","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"abs","","",12,{"inputs":[{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"vec3"}}],[11,"fmt","","",13,{"inputs":[{"name":"vec4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"vec4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",13,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"inf","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sup","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_le","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"from","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"index","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"swap","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",13,{"inputs":[{"name":"vec4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",13,{"inputs":[{"name":"n"}],"output":{"name":"vec4"}}],[11,"dim","","",13,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vec4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"add","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"sub","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"div","","",13,{"inputs":[{"name":"vec4"},{"name":"n"}],"output":{"name":"vec4"}}],[11,"neg","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"dot","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"n"}}],[11,"translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"prepend_translation_mut","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"set_translation","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":null}],[11,"sqnorm","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"normalize","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"normalize_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",13,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"is_zero","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"bool"}}],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"vec4"}}],[11,"max_value","","",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"min_value","","",13,{"inputs":[],"output":{"name":"vec4"}}],[11,"axpy","","",13,{"inputs":[{"name":"vec4"},{"name":"n"},{"name":"vec4"}],"output":null}],[11,"iter","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec5"}}],[11,"from","","",13,{"inputs":[{"name":"vec5"}],"output":{"name":"vec4"}}],[11,"translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",13,{"inputs":[{"name":"vec4"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",19,{"inputs":[{"name":"pnt4"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",13,{"inputs":[{"name":"vec4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"to_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"as_pnt","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"abs","","",13,{"inputs":[{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rand","","",13,{"inputs":[{"name":"r"}],"output":{"name":"vec4"}}],[11,"fmt","","",14,{"inputs":[{"name":"vec5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"vec5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",14,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"inf","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sup","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_le","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"from","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"index","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"swap","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",14,{"inputs":[{"name":"vec5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",14,{"inputs":[{"name":"n"}],"output":{"name":"vec5"}}],[11,"dim","","",14,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vec5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"add","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"sub","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"div","","",14,{"inputs":[{"name":"vec5"},{"name":"n"}],"output":{"name":"vec5"}}],[11,"neg","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"dot","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"n"}}],[11,"translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"inv_translation","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"append_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"append_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"prepend_translation_mut","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"prepend_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"set_translation","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":null}],[11,"sqnorm","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"normalize","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"normalize_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",14,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"zero","","",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"is_zero","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"bool"}}],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"vec5"}}],[11,"max_value","","",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"min_value","","",14,{"inputs":[],"output":{"name":"vec5"}}],[11,"axpy","","",14,{"inputs":[{"name":"vec5"},{"name":"n"},{"name":"vec5"}],"output":null}],[11,"iter","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec6"}}],[11,"from","","",14,{"inputs":[{"name":"vec6"}],"output":{"name":"vec5"}}],[11,"translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_translate","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",14,{"inputs":[{"name":"vec5"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",20,{"inputs":[{"name":"pnt5"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"inv_transform","","",14,{"inputs":[{"name":"vec5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"to_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"as_pnt","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"abs","","",14,{"inputs":[{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"rand","","",14,{"inputs":[{"name":"r"}],"output":{"name":"vec5"}}],[11,"fmt","","",15,{"inputs":[{"name":"vec6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"vec6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",15,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"inf","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sup","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_le","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"from","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"index","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"swap","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",15,{"inputs":[{"name":"vec6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",15,{"inputs":[{"name":"n"}],"output":{"name":"vec6"}}],[11,"dim","","",15,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"usize"}}],[11,"canonical_basis","","",15,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vec6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"add","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"sub","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"div","","",15,{"inputs":[{"name":"vec6"},{"name":"n"}],"output":{"name":"vec6"}}],[11,"neg","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"dot","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"n"}}],[11,"translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"inv_translation","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"append_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"append_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"prepend_translation_mut","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"prepend_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"set_translation","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":null}],[11,"sqnorm","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"normalize","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"normalize_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"n"}}],[11,"approx_epsilon","","",15,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"one","","",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"zero","","",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"is_zero","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"bool"}}],[11,"from_iter","","",15,{"inputs":[{"name":"i"}],"output":{"name":"vec6"}}],[11,"max_value","","",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"min_value","","",15,{"inputs":[],"output":{"name":"vec6"}}],[11,"axpy","","",15,{"inputs":[{"name":"vec6"},{"name":"n"},{"name":"vec6"}],"output":null}],[11,"iter","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"itermut"}}],[11,"translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_translate","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",15,{"inputs":[{"name":"vec6"},{"name":"o"}],"output":{"name":"o"}}],[11,"rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"inv_rotate","","",21,{"inputs":[{"name":"pnt6"},{"name":"o"}],"output":{"name":"o"}}],[11,"transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"inv_transform","","",15,{"inputs":[{"name":"vec6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"to_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"as_pnt","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"abs","","",15,{"inputs":[{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"rand","","",15,{"inputs":[{"name":"r"}],"output":{"name":"vec6"}}],[11,"fmt","","",32,{"inputs":[{"name":"pnt0"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"pnt0"}],"output":{"name":"pnt0"}}],[11,"eq","","",32,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"pnt0"},{"name":"pnt0"}],"output":{"name":"bool"}}],[11,"new","","Creates a new point.",32,{"inputs":[],"output":{"name":"pnt0"}}],[11,"repeat","","",32,{"inputs":[{"name":"n"}],"output":{"name":"pnt0"}}],[11,"fmt","","",16,{"inputs":[{"name":"pnt1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"pnt1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",16,{"inputs":[{"name":"n"}],"output":{"name":"pnt1"}}],[11,"orig","","",16,{"inputs":[],"output":{"name":"pnt1"}}],[11,"is_orig","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"inf","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"sup","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_le","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_gt","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"partial_ge","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"div","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"}],"output":{"name":"pnt1"}}],[11,"from","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"index","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"swap","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",16,{"inputs":[{"name":"pnt1"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",16,{"inputs":[{"name":"n"}],"output":{"name":"pnt1"}}],[11,"dim","","",16,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"to_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"as_vec","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"set_coords","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":null}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"vec1"}}],[11,"neg","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"add","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"sub","","",16,{"inputs":[{"name":"pnt1"},{"name":"vec1"}],"output":{"name":"pnt1"}}],[11,"approx_epsilon","","",16,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",16,{"inputs":[{"name":"pnt1"},{"name":"pnt1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"pnt1"}}],[11,"max_value","","",16,{"inputs":[],"output":{"name":"pnt1"}}],[11,"min_value","","",16,{"inputs":[],"output":{"name":"pnt1"}}],[11,"axpy","","",16,{"inputs":[{"name":"pnt1"},{"name":"n"},{"name":"pnt1"}],"output":null}],[11,"iter","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",16,{"inputs":[{"name":"pnt1"}],"output":{"name":"pnt2"}}],[11,"from","","",16,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt1"}}],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"pnt1"}}],[11,"fmt","","",17,{"inputs":[{"name":"pnt2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"pnt2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",17,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"orig","","",17,{"inputs":[],"output":{"name":"pnt2"}}],[11,"is_orig","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"inf","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"sup","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_le","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_gt","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"partial_ge","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"div","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"}],"output":{"name":"pnt2"}}],[11,"from","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"as_ref","","",17,null],[11,"as_mut","","",17,null],[11,"index","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"swap","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",17,{"inputs":[{"name":"pnt2"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",17,{"inputs":[{"name":"n"}],"output":{"name":"pnt2"}}],[11,"dim","","",17,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"to_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"as_vec","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"set_coords","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":null}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"vec2"}}],[11,"neg","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"add","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"sub","","",17,{"inputs":[{"name":"pnt2"},{"name":"vec2"}],"output":{"name":"pnt2"}}],[11,"approx_epsilon","","",17,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",17,{"inputs":[{"name":"pnt2"},{"name":"pnt2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"pnt2"}}],[11,"max_value","","",17,{"inputs":[],"output":{"name":"pnt2"}}],[11,"min_value","","",17,{"inputs":[],"output":{"name":"pnt2"}}],[11,"axpy","","",17,{"inputs":[{"name":"pnt2"},{"name":"n"},{"name":"pnt2"}],"output":null}],[11,"iter","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",17,{"inputs":[{"name":"pnt2"}],"output":{"name":"pnt3"}}],[11,"from","","",17,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt2"}}],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"pnt2"}}],[11,"fmt","","",18,{"inputs":[{"name":"pnt3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"pnt3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",18,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"orig","","",18,{"inputs":[],"output":{"name":"pnt3"}}],[11,"is_orig","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"inf","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"sup","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_le","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_gt","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"partial_ge","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"div","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"}],"output":{"name":"pnt3"}}],[11,"from","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"index","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"swap","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",18,{"inputs":[{"name":"pnt3"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",18,{"inputs":[{"name":"n"}],"output":{"name":"pnt3"}}],[11,"dim","","",18,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"to_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"as_vec","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"set_coords","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":null}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"vec3"}}],[11,"neg","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"add","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"sub","","",18,{"inputs":[{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"pnt3"}}],[11,"approx_epsilon","","",18,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",18,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"pnt3"}}],[11,"max_value","","",18,{"inputs":[],"output":{"name":"pnt3"}}],[11,"min_value","","",18,{"inputs":[],"output":{"name":"pnt3"}}],[11,"axpy","","",18,{"inputs":[{"name":"pnt3"},{"name":"n"},{"name":"pnt3"}],"output":null}],[11,"iter","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",18,{"inputs":[{"name":"pnt3"}],"output":{"name":"pnt4"}}],[11,"from","","",18,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt3"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"pnt3"}}],[11,"fmt","","",19,{"inputs":[{"name":"pnt4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"pnt4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",19,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"orig","","",19,{"inputs":[],"output":{"name":"pnt4"}}],[11,"is_orig","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"inf","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"sup","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_le","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_gt","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"partial_ge","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"div","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"}],"output":{"name":"pnt4"}}],[11,"from","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"index","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"swap","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",19,{"inputs":[{"name":"pnt4"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",19,{"inputs":[{"name":"n"}],"output":{"name":"pnt4"}}],[11,"dim","","",19,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"to_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"as_vec","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"set_coords","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":null}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"vec4"}}],[11,"neg","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"add","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"sub","","",19,{"inputs":[{"name":"pnt4"},{"name":"vec4"}],"output":{"name":"pnt4"}}],[11,"approx_epsilon","","",19,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",19,{"inputs":[{"name":"pnt4"},{"name":"pnt4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",19,{"inputs":[{"name":"i"}],"output":{"name":"pnt4"}}],[11,"max_value","","",19,{"inputs":[],"output":{"name":"pnt4"}}],[11,"min_value","","",19,{"inputs":[],"output":{"name":"pnt4"}}],[11,"axpy","","",19,{"inputs":[{"name":"pnt4"},{"name":"n"},{"name":"pnt4"}],"output":null}],[11,"iter","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",19,{"inputs":[{"name":"pnt4"}],"output":{"name":"pnt5"}}],[11,"from","","",19,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt4"}}],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"pnt4"}}],[11,"fmt","","",20,{"inputs":[{"name":"pnt5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"pnt5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",20,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"orig","","",20,{"inputs":[],"output":{"name":"pnt5"}}],[11,"is_orig","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"inf","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"sup","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_le","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_gt","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"partial_ge","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"div","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"}],"output":{"name":"pnt5"}}],[11,"from","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"index","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"swap","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",20,{"inputs":[{"name":"pnt5"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",20,{"inputs":[{"name":"n"}],"output":{"name":"pnt5"}}],[11,"dim","","",20,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"to_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"as_vec","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"set_coords","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":null}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"vec5"}}],[11,"neg","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"add","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"sub","","",20,{"inputs":[{"name":"pnt5"},{"name":"vec5"}],"output":{"name":"pnt5"}}],[11,"approx_epsilon","","",20,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",20,{"inputs":[{"name":"pnt5"},{"name":"pnt5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",20,{"inputs":[{"name":"i"}],"output":{"name":"pnt5"}}],[11,"max_value","","",20,{"inputs":[],"output":{"name":"pnt5"}}],[11,"min_value","","",20,{"inputs":[],"output":{"name":"pnt5"}}],[11,"axpy","","",20,{"inputs":[{"name":"pnt5"},{"name":"n"},{"name":"pnt5"}],"output":null}],[11,"iter","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"itermut"}}],[11,"to_homogeneous","","",20,{"inputs":[{"name":"pnt5"}],"output":{"name":"pnt6"}}],[11,"from","","",20,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt5"}}],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"pnt5"}}],[11,"fmt","","",21,{"inputs":[{"name":"pnt6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"pnt6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"new","","Creates a new vector.",21,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"orig","","",21,{"inputs":[],"output":{"name":"pnt6"}}],[11,"is_orig","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"inf","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"sup","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_le","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_gt","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"partial_ge","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"div","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"}],"output":{"name":"pnt6"}}],[11,"from","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"as_ref","","",21,null],[11,"as_mut","","",21,null],[11,"index","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"swap","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",21,{"inputs":[{"name":"pnt6"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",21,{"inputs":[{"name":"n"}],"output":{"name":"pnt6"}}],[11,"dim","","",21,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"usize"}}],[11,"to_vec","","Converts this point to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"to_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"as_vec","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"set_coords","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":null}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"vec6"}}],[11,"neg","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"add","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"sub","","",21,{"inputs":[{"name":"pnt6"},{"name":"vec6"}],"output":{"name":"pnt6"}}],[11,"approx_epsilon","","",21,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",21,{"inputs":[{"name":"pnt6"},{"name":"pnt6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"pnt6"}}],[11,"max_value","","",21,{"inputs":[],"output":{"name":"pnt6"}}],[11,"min_value","","",21,{"inputs":[],"output":{"name":"pnt6"}}],[11,"axpy","","",21,{"inputs":[{"name":"pnt6"},{"name":"n"},{"name":"pnt6"}],"output":null}],[11,"iter","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",21,{"inputs":[{"name":"pnt6"}],"output":{"name":"itermut"}}],[11,"rand","","",21,{"inputs":[{"name":"r"}],"output":{"name":"pnt6"}}],[11,"fmt","","",22,{"inputs":[{"name":"quat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"clone","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"quat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new quaternion from its components.",22,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quat"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"vec3"}}],[11,"scalar","","The scalar part `w` of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"conjugate","","Compute the conjugate of this quaternion.",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",22,{"inputs":[{"name":"quat"}],"output":null}],[11,"inv","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"option"}}],[11,"inv_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"sqnorm","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"normalize","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"normalize_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"n"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"quat"}}],[11,"fmt","","",33,{"inputs":[{"name":"unitquat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"clone","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,{"inputs":[{"name":"unitquat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",33,{"inputs":[{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"new_with_quat","","Creates a new unit quaternion from a quaternion.",33,{"inputs":[{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",33,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquat"}}],[11,"to_rot","","Builds a rotation matrix from this quaternion.",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",33,{"inputs":[{"name":"quat"}],"output":{"name":"unitquat"}}],[11,"quat","","The `Quat` representation of this unit quaternion.",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"quat"}}],[11,"one","","",33,{"inputs":[],"output":{"name":"unitquat"}}],[11,"inv","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"option"}}],[11,"inv_mut","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"bool"}}],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"unitquat"}}],[11,"approx_epsilon","","",33,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"div","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"unitquat"}],"output":{"name":"unitquat"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"unitquat"}],"output":{"name":"pnt3"}}],[11,"rotation","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"prepend_rotation_mut","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"unitquat"}}],[11,"set_rotation","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":null}],[11,"to_rot_mat","","",33,{"inputs":[{"name":"unitquat"}],"output":{"name":"rot3"}}],[11,"rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"angle_to","","",33,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",33,{"inputs":[{"name":"unitquat"},{"name":"self"}],"output":{"name":"unitquat"}}],[11,"transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",33,{"inputs":[{"name":"unitquat"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inf","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sup","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"pordering"}}],[11,"partial_lt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_le","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_gt","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"partial_ge","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[],"output":{"name":"quat"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[],"output":{"name":"quat"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[],"output":{"name":"quat"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",22,{"inputs":[],"output":{"name":"quat"}}],[11,"from","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"as_ref","","",22,null],[11,"as_mut","","",22,null],[11,"index","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"index_mut","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"shape","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"swap","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"unsafe_at","","",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"unsafe_set","","",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"at_fast","","Unsafe read access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"}],"output":{"name":"n"}}],[11,"set_fast","","Unsafe write access to a vector element by index.",22,{"inputs":[{"name":"quat"},{"name":"usize"},{"name":"n"}],"output":null}],[11,"repeat","","Creates a new vector with all its components equal to a given value.",22,{"inputs":[{"name":"n"}],"output":{"name":"quat"}}],[11,"dim","","",22,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"usize"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"quat"}}],[11,"add","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"sub","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"mul","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"div","","",22,{"inputs":[{"name":"quat"},{"name":"n"}],"output":{"name":"quat"}}],[11,"neg","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"quat"}}],[11,"one","","",22,{"inputs":[],"output":{"name":"quat"}}],[11,"zero","","",22,{"inputs":[],"output":{"name":"quat"}}],[11,"is_zero","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_epsilon","","",22,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",22,{"inputs":[{"name":"quat"},{"name":"quat"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",22,{"inputs":[{"name":"quat"},{"name":"quat"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_iter","","",22,{"inputs":[{"name":"i"}],"output":{"name":"quat"}}],[11,"max_value","","",22,{"inputs":[],"output":{"name":"quat"}}],[11,"min_value","","",22,{"inputs":[],"output":{"name":"quat"}}],[11,"axpy","","",22,{"inputs":[{"name":"quat"},{"name":"n"},{"name":"quat"}],"output":null}],[11,"iter","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"iter"}}],[11,"iter_mut","","",22,{"inputs":[{"name":"quat"}],"output":{"name":"itermut"}}],[11,"dim","","",33,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"fmt","","",34,{"inputs":[{"name":"identity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,{"inputs":[{"name":"identity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"identity"},{"name":"identity"}],"output":{"name":"bool"}}],[11,"new","","Creates a new identity matrix.",34,{"inputs":[],"output":{"name":"identity"}}],[11,"fmt","","",4,{"inputs":[{"name":"mat1"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"mat1"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"bool"}}],[11,"new_identity","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"mat1"}}],[11,"new","","",4,{"inputs":[{"name":"n"}],"output":{"name":"mat1"}}],[11,"repeat","","",4,{"inputs":[{"name":"n"}],"output":{"name":"mat1"}}],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"add","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"sub","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"div","","",4,{"inputs":[{"name":"mat1"},{"name":"n"}],"output":{"name":"mat1"}}],[11,"abs","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"mat1"}}],[11,"is_zero","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"mat1"}}],[11,"iter","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"iter"}}],[11,"iter_mut","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"itermut"}}],[11,"at_fast","","",4,null],[11,"set_fast","","",4,null],[11,"dim","","",4,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",4,null],[11,"swap","","",4,null],[11,"unsafe_at","","",4,null],[11,"unsafe_set","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"vec1"}],"output":{"name":"vec1"}}],[11,"mul","","",10,{"inputs":[{"name":"vec1"},{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"mul","","",4,{"inputs":[{"name":"mat1"},{"name":"pnt1"}],"output":{"name":"pnt1"}}],[11,"mul","","",16,{"inputs":[{"name":"pnt1"},{"name":"mat1"}],"output":{"name":"pnt1"}}],[11,"transpose","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat1"}}],[11,"transpose_mut","","",4,{"inputs":[{"name":"mat1"}],"output":null}],[11,"approx_epsilon","","",4,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",4,{"inputs":[{"name":"mat1"},{"name":"mat1"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"row","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"ncols","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"usize"}}],[11,"set_col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"vec1"}],"output":null}],[11,"col","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"}],"output":{"name":"vec1"}}],[11,"col_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"row_slice","","",4,{"inputs":[{"name":"mat1"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec1"}}],[11,"from_diag","","",4,{"inputs":[{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"diag","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"vec1"}}],[11,"to_homogeneous","","",4,{"inputs":[{"name":"mat1"}],"output":{"name":"mat2"}}],[11,"from","","",4,{"inputs":[{"name":"mat2"}],"output":{"name":"mat1"}}],[11,"outer","","",10,{"inputs":[{"name":"vec1"},{"name":"vec1"}],"output":{"name":"mat1"}}],[11,"eigen_qr","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"mat1"}}],[11,"fmt","","",5,{"inputs":[{"name":"mat2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"mat2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"bool"}}],[11,"new_identity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"mat2"}}],[11,"new","","",5,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"repeat","","",5,{"inputs":[{"name":"n"}],"output":{"name":"mat2"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"add","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"sub","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"mul","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"div","","",5,{"inputs":[{"name":"mat2"},{"name":"n"}],"output":{"name":"mat2"}}],[11,"abs","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"mat2"}}],[11,"is_zero","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"mat2"}}],[11,"iter","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"iter"}}],[11,"iter_mut","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"itermut"}}],[11,"dim","","",5,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"transpose","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat2"}}],[11,"transpose_mut","","",5,{"inputs":[{"name":"mat2"}],"output":null}],[11,"approx_epsilon","","",5,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",5,{"inputs":[{"name":"mat2"},{"name":"mat2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"row","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"ncols","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"usize"}}],[11,"set_col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"col","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"col_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"row_slice","","",5,{"inputs":[{"name":"mat2"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec2"}}],[11,"from_diag","","",5,{"inputs":[{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"diag","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"vec2"}}],[11,"to_homogeneous","","",5,{"inputs":[{"name":"mat2"}],"output":{"name":"mat3"}}],[11,"from","","",5,{"inputs":[{"name":"mat3"}],"output":{"name":"mat2"}}],[11,"outer","","",11,{"inputs":[{"name":"vec2"},{"name":"vec2"}],"output":{"name":"mat2"}}],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"mat2"}}],[11,"fmt","","",6,{"inputs":[{"name":"mat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"mat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"bool"}}],[11,"new_identity","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"mat3"}}],[11,"new","","",6,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"repeat","","",6,{"inputs":[{"name":"n"}],"output":{"name":"mat3"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"add","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"sub","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"mul","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"div","","",6,{"inputs":[{"name":"mat3"},{"name":"n"}],"output":{"name":"mat3"}}],[11,"abs","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"mat3"}}],[11,"is_zero","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"mat3"}}],[11,"iter","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"iter"}}],[11,"iter_mut","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"itermut"}}],[11,"dim","","",6,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"transpose","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat3"}}],[11,"transpose_mut","","",6,{"inputs":[{"name":"mat3"}],"output":null}],[11,"approx_epsilon","","",6,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",6,{"inputs":[{"name":"mat3"},{"name":"mat3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"col_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"row_slice","","",6,{"inputs":[{"name":"mat3"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec3"}}],[11,"from_diag","","",6,{"inputs":[{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"diag","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"vec3"}}],[11,"to_homogeneous","","",6,{"inputs":[{"name":"mat3"}],"output":{"name":"mat4"}}],[11,"from","","",6,{"inputs":[{"name":"mat4"}],"output":{"name":"mat3"}}],[11,"outer","","",12,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"mat3"}}],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"mat3"}}],[11,"fmt","","",7,{"inputs":[{"name":"mat4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"mat4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"bool"}}],[11,"new_identity","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"mat4"}}],[11,"new","","",7,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"repeat","","",7,{"inputs":[{"name":"n"}],"output":{"name":"mat4"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"add","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"sub","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"div","","",7,{"inputs":[{"name":"mat4"},{"name":"n"}],"output":{"name":"mat4"}}],[11,"abs","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"mat4"}}],[11,"is_zero","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"mat4"}}],[11,"iter","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"iter"}}],[11,"iter_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"itermut"}}],[11,"dim","","",7,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"mul","","",7,{"inputs":[{"name":"mat4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"mat4"}],"output":{"name":"pnt4"}}],[11,"inv","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"option"}}],[11,"inv_mut","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"bool"}}],[11,"transpose","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat4"}}],[11,"transpose_mut","","",7,{"inputs":[{"name":"mat4"}],"output":null}],[11,"approx_epsilon","","",7,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",7,{"inputs":[{"name":"mat4"},{"name":"mat4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"row","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"ncols","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"usize"}}],[11,"set_col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"col","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"col_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"row_slice","","",7,{"inputs":[{"name":"mat4"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec4"}}],[11,"from_diag","","",7,{"inputs":[{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"diag","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"vec4"}}],[11,"to_homogeneous","","",7,{"inputs":[{"name":"mat4"}],"output":{"name":"mat5"}}],[11,"from","","",7,{"inputs":[{"name":"mat5"}],"output":{"name":"mat4"}}],[11,"outer","","",13,{"inputs":[{"name":"vec4"},{"name":"vec4"}],"output":{"name":"mat4"}}],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"mat4"}}],[11,"fmt","","",8,{"inputs":[{"name":"mat5"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"mat5"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"bool"}}],[11,"new_identity","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"mat5"}}],[11,"new","","",8,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"repeat","","",8,{"inputs":[{"name":"n"}],"output":{"name":"mat5"}}],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"abs","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"mat5"}}],[11,"is_zero","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"add","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"sub","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"div","","",8,{"inputs":[{"name":"mat5"},{"name":"n"}],"output":{"name":"mat5"}}],[11,"iter","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"iter"}}],[11,"iter_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"itermut"}}],[11,"dim","","",8,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"vec5"}],"output":{"name":"vec5"}}],[11,"mul","","",14,{"inputs":[{"name":"vec5"},{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"mul","","",8,{"inputs":[{"name":"mat5"},{"name":"pnt5"}],"output":{"name":"pnt5"}}],[11,"mul","","",20,{"inputs":[{"name":"pnt5"},{"name":"mat5"}],"output":{"name":"pnt5"}}],[11,"inv","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"option"}}],[11,"inv_mut","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"bool"}}],[11,"transpose","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat5"}}],[11,"transpose_mut","","",8,{"inputs":[{"name":"mat5"}],"output":null}],[11,"approx_epsilon","","",8,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",8,{"inputs":[{"name":"mat5"},{"name":"mat5"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"row","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"ncols","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"usize"}}],[11,"set_col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"vec5"}],"output":null}],[11,"col","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"}],"output":{"name":"vec5"}}],[11,"col_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"row_slice","","",8,{"inputs":[{"name":"mat5"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec5"}}],[11,"from_diag","","",8,{"inputs":[{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"diag","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"vec5"}}],[11,"to_homogeneous","","",8,{"inputs":[{"name":"mat5"}],"output":{"name":"mat6"}}],[11,"from","","",8,{"inputs":[{"name":"mat6"}],"output":{"name":"mat5"}}],[11,"outer","","",14,{"inputs":[{"name":"vec5"},{"name":"vec5"}],"output":{"name":"mat5"}}],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"mat5"}}],[11,"fmt","","",9,{"inputs":[{"name":"mat6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"mat6"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"bool"}}],[11,"new_identity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"mat6"}}],[11,"new","","",9,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"repeat","","",9,{"inputs":[{"name":"n"}],"output":{"name":"mat6"}}],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"add","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"sub","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"div","","",9,{"inputs":[{"name":"mat6"},{"name":"n"}],"output":{"name":"mat6"}}],[11,"abs","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"mat6"}}],[11,"is_zero","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"one","","",9,{"inputs":[],"output":{"name":"mat6"}}],[11,"iter","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"iter"}}],[11,"iter_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"itermut"}}],[11,"dim","","",9,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"vec6"}],"output":{"name":"vec6"}}],[11,"mul","","",15,{"inputs":[{"name":"vec6"},{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"mul","","",9,{"inputs":[{"name":"mat6"},{"name":"pnt6"}],"output":{"name":"pnt6"}}],[11,"mul","","",21,{"inputs":[{"name":"pnt6"},{"name":"mat6"}],"output":{"name":"pnt6"}}],[11,"inv","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"option"}}],[11,"inv_mut","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"bool"}}],[11,"transpose","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"mat6"}}],[11,"transpose_mut","","",9,{"inputs":[{"name":"mat6"}],"output":null}],[11,"approx_epsilon","","",9,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",9,{"inputs":[{"name":"mat6"},{"name":"mat6"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"nrows","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"row","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"ncols","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"usize"}}],[11,"set_col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"vec6"}],"output":null}],[11,"col","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"}],"output":{"name":"vec6"}}],[11,"col_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"row_slice","","",9,{"inputs":[{"name":"mat6"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dvec6"}}],[11,"from_diag","","",9,{"inputs":[{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"diag","","",9,{"inputs":[{"name":"mat6"}],"output":{"name":"vec6"}}],[11,"outer","","",15,{"inputs":[{"name":"vec6"},{"name":"vec6"}],"output":{"name":"mat6"}}],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"mat6"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"rot2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,{"inputs":[{"name":"rot2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",35,{"inputs":[{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"rotation","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"prepend_rotation_mut","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":{"name":"rot2"}}],[11,"set_rotation","","",35,{"inputs":[{"name":"rot2"},{"name":"vec1"}],"output":null}],[11,"angle_to","","",35,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",35,{"inputs":[{"name":"rot2"},{"name":"self"}],"output":{"name":"rot2"}}],[11,"rand","","",35,{"inputs":[{"name":"r"}],"output":{"name":"rot2"}}],[11,"absolute_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"rot3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,{"inputs":[{"name":"rot3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",36,{"inputs":[{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",36,{"inputs":[{"name":"mat3"}],"output":{"name":"rot3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",36,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rot3"}}],[11,"look_at","","Create a new matrix and orient it such that its local `x` axis points to a given point.\nNote that the usually known `look_at` function does the same thing but with the `z` axis.\nSee `look_at_z` for that.",36,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"look_at_z","","Create a new matrix and orient it such that its local `z` axis points to a given point.",36,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"rotation","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"prepend_rotation_mut","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"set_rotation","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":null}],[11,"angle_to","","",36,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"n"}}],[11,"rotation_to","","",36,{"inputs":[{"name":"rot3"},{"name":"self"}],"output":{"name":"rot3"}}],[11,"rand","","",36,{"inputs":[{"name":"r"}],"output":{"name":"rot3"}}],[11,"absolute_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"rot4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,{"inputs":[{"name":"rot4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"absolute_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotation","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"inv_rotation","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"append_rotation_mut","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"append_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"prepend_rotation_mut","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"prepend_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"set_rotation","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":null}],[11,"submat","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_rotate","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transform","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_transform","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"transform","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"dim","","",35,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"mul","","",11,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"mul","","",35,{"inputs":[{"name":"rot2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"rot2"}],"output":{"name":"pnt2"}}],[11,"one","","",35,{"inputs":[],"output":{"name":"rot2"}}],[11,"new_identity","","",35,{"inputs":[{"name":"usize"}],"output":{"name":"rot2"}}],[11,"to_rot_mat","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"ncols","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"col","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_col","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"nrows","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"usize"}}],[11,"row","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"}],"output":{"name":"vec2"}}],[11,"set_row","","",35,{"inputs":[{"name":"rot2"},{"name":"usize"},{"name":"vec2"}],"output":null}],[11,"index","","",35,null],[11,"abs","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat2"}}],[11,"to_homogeneous","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"bool"}}],[11,"inv","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"option"}}],[11,"transpose","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"rot2"}}],[11,"transpose_mut","","",35,{"inputs":[{"name":"rot2"}],"output":null}],[11,"approx_epsilon","","",35,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",35,{"inputs":[{"name":"rot2"},{"name":"rot2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",35,{"inputs":[{"name":"vec2"}],"output":{"name":"rot2"}}],[11,"diag","","",35,{"inputs":[{"name":"rot2"}],"output":{"name":"vec2"}}],[11,"submat","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_rotate","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transform","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"transform","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"dim","","",36,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"mul","","",12,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"mul","","",36,{"inputs":[{"name":"rot3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"rot3"}],"output":{"name":"pnt3"}}],[11,"one","","",36,{"inputs":[],"output":{"name":"rot3"}}],[11,"new_identity","","",36,{"inputs":[{"name":"usize"}],"output":{"name":"rot3"}}],[11,"to_rot_mat","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"ncols","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"col","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_col","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"nrows","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"usize"}}],[11,"row","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"}],"output":{"name":"vec3"}}],[11,"set_row","","",36,{"inputs":[{"name":"rot3"},{"name":"usize"},{"name":"vec3"}],"output":null}],[11,"index","","",36,null],[11,"abs","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat3"}}],[11,"to_homogeneous","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"bool"}}],[11,"inv","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"option"}}],[11,"transpose","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"rot3"}}],[11,"transpose_mut","","",36,{"inputs":[{"name":"rot3"}],"output":null}],[11,"approx_epsilon","","",36,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",36,{"inputs":[{"name":"rot3"},{"name":"rot3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",36,{"inputs":[{"name":"vec3"}],"output":{"name":"rot3"}}],[11,"diag","","",36,{"inputs":[{"name":"rot3"}],"output":{"name":"vec3"}}],[11,"submat","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_rotate","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transform","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_transform","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"transform","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"dim","","",37,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"mul","","",13,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"mul","","",37,{"inputs":[{"name":"rot4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"rot4"}],"output":{"name":"pnt4"}}],[11,"one","","",37,{"inputs":[],"output":{"name":"rot4"}}],[11,"new_identity","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"rot4"}}],[11,"to_rot_mat","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"ncols","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"col","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_col","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"nrows","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"usize"}}],[11,"row","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"}],"output":{"name":"vec4"}}],[11,"set_row","","",37,{"inputs":[{"name":"rot4"},{"name":"usize"},{"name":"vec4"}],"output":null}],[11,"index","","",37,null],[11,"abs","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat4"}}],[11,"to_homogeneous","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"bool"}}],[11,"inv","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"option"}}],[11,"transpose","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"rot4"}}],[11,"transpose_mut","","",37,{"inputs":[{"name":"rot4"}],"output":null}],[11,"approx_epsilon","","",37,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",37,{"inputs":[{"name":"rot4"},{"name":"rot4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"from_diag","","",37,{"inputs":[{"name":"vec4"}],"output":{"name":"rot4"}}],[11,"diag","","",37,{"inputs":[{"name":"rot4"}],"output":{"name":"vec4"}}],[11,"fmt","","",1,{"inputs":[{"name":"iso2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"iso2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"iso3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"iso3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iso4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"iso4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"bool"}}],[11,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2,{"inputs":[{"name":"pnt3"},{"name":"pnt3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3,{"inputs":[{"name":"vec4"},{"name":"rot4"}],"output":{"name":"iso4"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vec2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vec2"},{"name":"rot2"}],"output":{"name":"iso2"}}],[11,"to_rot_mat","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"rot2"}}],[11,"rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"inv_rotation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec1"}}],[11,"append_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"append_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"prepend_rotation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"prepend_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":{"name":"iso2"}}],[11,"set_rotation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec1"}],"output":null}],[11,"dim","","",1,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"iso2"}}],[11,"absolute_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"iso2"}}],[11,"approx_epsilon","","",1,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"mat3"}}],[11,"inv_mut","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"bool"}}],[11,"inv","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"option"}}],[11,"transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_transform","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"inv_transformation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"append_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"append_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"prepend_transformation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"prepend_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"set_transformation","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"inv_rotate","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"vec2"}}],[11,"translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"inv_translation","","",1,{"inputs":[{"name":"iso2"}],"output":{"name":"vec2"}}],[11,"append_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"append_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"prepend_translation_mut","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"prepend_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":{"name":"iso2"}}],[11,"set_translation","","",1,{"inputs":[{"name":"iso2"},{"name":"vec2"}],"output":null}],[11,"translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"inv_translate","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"iso2"}],"output":{"name":"iso2"}}],[11,"mul","","",1,{"inputs":[{"name":"iso2"},{"name":"pnt2"}],"output":{"name":"pnt2"}}],[11,"mul","","",17,{"inputs":[{"name":"pnt2"},{"name":"iso2"}],"output":{"name":"pnt2"}}],[11,"new","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vec3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vec3"},{"name":"rot3"}],"output":{"name":"iso3"}}],[11,"to_rot_mat","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"rot3"}}],[11,"rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_rotation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_rotation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_rotation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"dim","","",2,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"iso3"}}],[11,"absolute_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"iso3"}}],[11,"approx_epsilon","","",2,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"mat4"}}],[11,"inv_mut","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"bool"}}],[11,"inv","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"option"}}],[11,"transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_transform","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"inv_transformation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"append_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"append_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"prepend_transformation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"prepend_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"set_transformation","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"inv_rotate","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"inv_translation","","",2,{"inputs":[{"name":"iso3"}],"output":{"name":"vec3"}}],[11,"append_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"append_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"prepend_translation_mut","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"prepend_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":{"name":"iso3"}}],[11,"set_translation","","",2,{"inputs":[{"name":"iso3"},{"name":"vec3"}],"output":null}],[11,"translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"inv_translate","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"iso3"}],"output":{"name":"iso3"}}],[11,"mul","","",2,{"inputs":[{"name":"iso3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"mul","","",18,{"inputs":[{"name":"pnt3"},{"name":"iso3"}],"output":{"name":"pnt3"}}],[11,"dim","","",3,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"iso4"}}],[11,"absolute_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"approx_epsilon","","",3,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"n"}],"output":{"name":"bool"}}],[11,"approx_eq_ulps","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"to_homogeneous","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"mat5"}}],[11,"inv_mut","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"bool"}}],[11,"inv","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"option"}}],[11,"transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_transform","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"inv_transformation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"append_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"append_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"prepend_transformation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"prepend_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"set_transformation","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":null}],[11,"rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"inv_rotate","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"vec4"}}],[11,"translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"inv_translation","","",3,{"inputs":[{"name":"iso4"}],"output":{"name":"vec4"}}],[11,"append_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"append_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"prepend_translation_mut","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"prepend_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":{"name":"iso4"}}],[11,"set_translation","","",3,{"inputs":[{"name":"iso4"},{"name":"vec4"}],"output":null}],[11,"translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"inv_translate","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"iso4"}],"output":{"name":"iso4"}}],[11,"mul","","",3,{"inputs":[{"name":"iso4"},{"name":"pnt4"}],"output":{"name":"pnt4"}}],[11,"mul","","",19,{"inputs":[{"name":"pnt4"},{"name":"iso4"}],"output":{"name":"pnt4"}}],[11,"fmt","","",38,{"inputs":[{"name":"persp3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"persp3"}],"output":{"name":"persp3"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,{"inputs":[{"name":"persp3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"persp3"},{"name":"persp3"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"perspmat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"perspmat3"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,{"inputs":[{"name":"perspmat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"perspmat3"},{"name":"perspmat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D perspective projection.",38,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"persp3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `PerspMat3` representing this projection.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"perspmat3"}}],[11,"aspect","","Gets the `width / height` aspect ratio.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"}],"output":{"name":"n"}}],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_fov","","Sets the field of view of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",38,{"inputs":[{"name":"persp3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",38,{"inputs":[{"name":"persp3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",38,{"inputs":[{"name":"persp3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",39,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspmat3"}}],[11,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",39,{"inputs":[{"name":"mat4"}],"output":{"name":"perspmat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"fov","","Gets the field of view of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"znear","","Gets the near plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"zfar","","Gets the far plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"n"}}],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_fov","","Updates this projection with a new field of view of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",39,{"inputs":[{"name":"perspmat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",39,{"inputs":[{"name":"perspmat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",39,{"inputs":[{"name":"perspmat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",39,{"inputs":[{"name":"perspmat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",40,{"inputs":[{"name":"ortho3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"ortho3"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,{"inputs":[{"name":"ortho3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"ortho3"},{"name":"ortho3"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"orthomat3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"orthomat3"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,{"inputs":[{"name":"orthomat3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"orthomat3"},{"name":"orthomat3"}],"output":{"name":"bool"}}],[11,"new","","Creates a new 3D orthographic projection.",40,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"ortho3"}}],[11,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"mat4"}}],[11,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"orthomat3"}}],[11,"width","","The width of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",40,{"inputs":[{"name":"ortho3"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",40,{"inputs":[{"name":"ortho3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",40,{"inputs":[{"name":"ortho3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",41,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthomat3"}}],[11,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",41,{"inputs":[{"name":"mat4"}],"output":{"name":"orthomat3"}}],[11,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"width","","The width of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"height","","The height of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"znear","","The near plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"zfar","","The far plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"n"}}],[11,"set_width","","Sets the width of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_height","","Sets the height of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear","","Sets the near plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"}],"output":null}],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",41,{"inputs":[{"name":"orthomat3"},{"name":"n"},{"name":"n"}],"output":null}],[11,"project_pnt","","Projects a point.",41,{"inputs":[{"name":"orthomat3"},{"name":"pnt3"}],"output":{"name":"pnt3"}}],[11,"project_vec","","Projects a vector.",41,{"inputs":[{"name":"orthomat3"},{"name":"vec3"}],"output":{"name":"vec3"}}],[11,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",41,{"inputs":[{"name":"orthomat3"}],"output":{"name":"mat4"}}],[11,"fmt","","",23,{"inputs":[{"name":"pordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"pordering"}],"output":{"name":"pordering"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"pordering"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"pordering"},{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"bool"}}],[11,"from_ordering","","Creates a `POrdering` from an `Ordering`.",23,{"inputs":[{"name":"ordering"}],"output":{"name":"pordering"}}],[11,"to_ordering","","Converts this `POrdering` to an `Ordering`.",23,{"inputs":[{"name":"pordering"}],"output":{"name":"option"}}],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",42,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",43,{"inputs":[{"name":"absoluterotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",44,{"inputs":[{"name":"option"}],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",44,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[10,"approx_ulps","","Default ULPs for approximation.",44,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",44,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"approx_eq","","Tests approximate equality.",44,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",45,{"inputs":[{"name":"axpy"},{"name":"n"},{"name":"self"}],"output":null}],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",46,{"inputs":[{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",46,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes&#39; constant.",47,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",47,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",47,{"inputs":[],"output":{"name":"self"}}],[10,"e","","Euler&#39;s number.",47,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",47,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",47,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",47,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",47,{"inputs":[],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",48,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",48,{"inputs":[],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",49,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Col","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",50,{"inputs":[{"name":"col"}],"output":{"name":"usize"}}],[10,"col","","Reads the `i`-th column of `self`.",50,{"inputs":[{"name":"col"},{"name":"usize"}],"output":{"name":"c"}}],[10,"set_col","","Writes the `i`-th column of `self`.",50,{"inputs":[{"name":"col"},{"name":"usize"},{"name":"c"}],"output":null}],[8,"ColSlice","","Trait to access part of a column of a matrix",null,null],[10,"col_slice","","Returns a view to a slice of a column of a matrix.",51,{"inputs":[{"name":"colslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"c"}}],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",52,{"inputs":[{"name":"rowslice"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"r"}}],[8,"Cov","","Trait for computing the covariance of a set of data.",null,null],[10,"cov","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"}],"output":{"name":"m"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",54,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",54,{"inputs":[{"name":"cross"},{"name":"self"}],"output":{"name":"crossproducttype"}}],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",55,{"inputs":[{"name":"crossmatrix"}],"output":{"name":"m"}}],[8,"Det","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"det","","Returns the determinant of `m`.",56,{"inputs":[{"name":"det"}],"output":{"name":"n"}}],[8,"Diag","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diag","","Creates a new matrix with the given diagonal.",57,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[10,"diag","","The diagonal of this matrix.",57,{"inputs":[{"name":"diag"}],"output":{"name":"v"}}],[8,"Dim","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dim","","The dimension of the object.",58,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",59,{"inputs":[{"name":"dot"},{"name":"self"}],"output":{"name":"n"}}],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",60,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",61,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"sqdist","","Computes the square distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[8,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",63,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"i"}],"output":null}],[10,"unsafe_at","","Reads the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"}],"output":{"name":"n"}}],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",64,{"inputs":[{"name":"indexable"},{"name":"i"},{"name":"n"}],"output":null}],[8,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inv","","Returns the inverse of `m`.",65,{"inputs":[{"name":"inv"}],"output":{"name":"option"}}],[10,"inv_mut","","In-place version of `inverse`.",65,{"inputs":[{"name":"inv"}],"output":{"name":"bool"}}],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",66,{"inputs":[{"name":"iterable"}],"output":{"name":"iter"}}],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",67,{"inputs":[{"name":"iterablemut"}],"output":{"name":"itermut"}}],[8,"Mat","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the covariance of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",68,{"inputs":[{"name":"mean"}],"output":{"name":"n"}}],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[11,"norm","","Computes the norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"sqnorm","","Computes the squared norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[10,"normalize","","Gets the normalized version of a copy of `v`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"self"}}],[10,"normalize_mut","","Normalizes `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[8,"NumPnt","","Trait grouping most common operations on points.",null,null],[8,"NumVec","","Trait grouping most common operations on vectors.",null,null],[8,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"orig","","The trivial origin.",70,{"inputs":[],"output":{"name":"self"}}],[10,"is_orig","","Returns true if this points is exactly the trivial origin.",70,{"inputs":[{"name":"orig"}],"output":{"name":"bool"}}],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",71,null],[10,"outer","","Computes the outer product: `a * b`",71,{"inputs":[{"name":"outer"},{"name":"self"}],"output":{"name":"outerproducttype"}}],[8,"POrd","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"sup","","Returns the supremum of this value and another",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"pordering"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",72,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[10,"to_vec","","Converts this point to its associated vector.",73,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",73,{"inputs":[{"name":"pntasvec"}],"output":{"name":"v"}}],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",73,{"inputs":[{"name":"pntasvec"},{"name":"v"}],"output":null}],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",74,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",75,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_rotate","","Applies an inverse rotation to `v`.",75,{"inputs":[{"name":"rotate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",76,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"inv_rotation","","Gets the inverse rotation associated with `self`.",76,{"inputs":[{"name":"rotation"}],"output":{"name":"v"}}],[10,"append_rotation_mut","","Appends a rotation to this object.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_rotation","","Sets the rotation of `self`.",76,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":null}],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",77,null],[10,"to_rot_mat","","Gets the rotation matrix represented by `self`.",77,{"inputs":[{"name":"rotationmatrix"}],"output":{"name":"output"}}],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",79,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",79,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a\nrotation.",79,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"angletype"}}],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",79,{"inputs":[{"name":"rotationto"},{"name":"self"}],"output":{"name":"deltarotationtype"}}],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",80,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[10,"row","","Reads the `i`-th row of `self`.",80,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"r"}}],[10,"set_row","","Writes the `i`-th row of `self`.",80,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"r"}],"output":null}],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",81,{"inputs":[{"name":"shape"}],"output":{"name":"i"}}],[8,"SquareMat","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",82,{"inputs":[{"name":"tohomogeneous"}],"output":{"name":"u"}}],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",83,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_transform","","Applies an inverse transformation to `v`.",83,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",84,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"inv_transformation","","Gets the inverse transformation of `self`.",84,{"inputs":[{"name":"transformation"}],"output":{"name":"m"}}],[10,"append_transformation_mut","","Appends a transformation to this object.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":{"name":"self"}}],[10,"set_transformation","","Sets the transformation of `self`.",84,{"inputs":[{"name":"transformation"},{"name":"m"}],"output":null}],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",85,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[10,"inv_translate","","Apply an inverse translation to an object.",85,{"inputs":[{"name":"translate"},{"name":"v"}],"output":{"name":"v"}}],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",86,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"inv_translation","","Gets the inverse translation associated with this object.",86,{"inputs":[{"name":"translation"}],"output":{"name":"v"}}],[10,"append_translation_mut","","Appends a translation to this object.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"prepend_translation_mut","","Prepends a translation to this object.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":{"name":"self"}}],[10,"set_translation","","Sets the translation.",86,{"inputs":[{"name":"translation"},{"name":"v"}],"output":null}],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",87,{"inputs":[{"name":"transpose"}],"output":{"name":"self"}}],[10,"transpose_mut","","In-place version of `transposed`.",87,{"inputs":[{"name":"transpose"}],"output":null}],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",88,{"inputs":[{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[14,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"norm","","Computes the norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"sqdist","","Computes the square distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",72,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"approx_eq","","Tests approximate equality.",44,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[11,"norm","","Computes the norm of `self`.",69,{"inputs":[{"name":"norm"}],"output":{"name":"n"}}],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"},{"name":"lv"}],"output":null}],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":{"name":"self"}}],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",78,{"inputs":[{"name":"rotationwithtranslation"},{"name":"av"}],"output":null}],[11,"sqdist","","Computes the square distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"dist","","Computes the distance between two points.",62,{"inputs":[{"name":"floatpnt"},{"name":"self"}],"output":{"name":"n"}}],[11,"approx_eq","","Tests approximate equality.",44,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53,{"inputs":[{"name":"cov"},{"name":"m"}],"output":null}],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",72,{"inputs":[{"name":"pord"},{"name":"self"}],"output":{"name":"option"}}],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",72,{"inputs":[{"name":"pord"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"DVec"],[3,"Iso2"],[3,"Iso3"],[3,"Iso4"],[3,"Mat1"],[3,"Mat2"],[3,"Mat3"],[3,"Mat4"],[3,"Mat5"],[3,"Mat6"],[3,"Vec1"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"],[3,"Vec5"],[3,"Vec6"],[3,"Pnt1"],[3,"Pnt2"],[3,"Pnt3"],[3,"Pnt4"],[3,"Pnt5"],[3,"Pnt6"],[3,"Quat"],[4,"POrdering"],[3,"DMat"],[3,"DVec1"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"DVec5"],[3,"DVec6"],[3,"Vec0"],[3,"Pnt0"],[3,"UnitQuat"],[3,"Identity"],[3,"Rot2"],[3,"Rot3"],[3,"Rot4"],[3,"Persp3"],[3,"PerspMat3"],[3,"Ortho3"],[3,"OrthoMat3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Col"],[8,"ColSlice"],[8,"RowSlice"],[8,"Cov"],[8,"Cross"],[8,"CrossMatrix"],[8,"Det"],[8,"Diag"],[8,"Dim"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPnt"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inv"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Orig"],[8,"Outer"],[8,"POrd"],[8,"PntAsVec"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",15,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"bitset"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":null}],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,{"inputs":[{"name":"bitset"}],"output":null}],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"iter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":null}],[11,"len","","Returns the number of set bits in this set.",0,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",0,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",0,{"inputs":[{"name":"bitset"}],"output":null}],[11,"contains","","Returns `true` if this set contains the specified integer.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,{"inputs":[{"name":"bitset"},{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",0,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"bitset"},{"name":"h"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",2,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",3,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",4,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",5,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",1,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",3,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",4,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",5,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",2,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",4,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",11,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1&#39;s in the bitwise repr",0,{"inputs":[{"name":"bitblock"}],"output":{"name":"usize"}}],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"blocks"}}],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"set_all","","Sets all bits to 1.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"negate","","Flips all bits.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"none","","Returns `true` if all bits are 0.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",1,{"inputs":[{"name":"bitvec"},{"name":"bool"}],"output":null}],[11,"len","","Returns the total number of bits in this vector",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":null}],[11,"is_empty","","Returns true if there are no bits in this vector",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",1,{"inputs":[{"name":"bitvec"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,{"inputs":[{"name":"bitvec"},{"name":"h"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"bitvec"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",1,{"inputs":[{"name":"bitvec"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"blocks"}}],[11,"next","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"blocks"}],"output":{"name":"option"}}]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["csv"] = {"doc":"This crate provides a streaming CSV (comma separated values) writer and\nreader that works with the `serialize` crate to do type based encoding\nand decoding. There are two primary goals of this project:","items":[[3,"Encoded","csv","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"LocatableError","","An error tagged with a location at which it occurred.",null,null],[12,"record","","The record number (starting at 1).",0,null],[12,"field","","The field number (starting at 1).",0,null],[12,"err","","The error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrowed slice of the parser&#39;s internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is\nfirst returned. All subsequent calls of `next_bytes` will return\n`EndOfCsv`. (EOF is exempt from this. Depending on the state of the\nparser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`,\nall in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the\nparser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This *never* writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseError","","A description of a CSV parse error.",null,null],[13,"UnequalLengths","","A record was found that has a different size than other records.",5,null],[12,"expected","csv::ParseError","Expected a record with this many fields.",5,null],[12,"got","","Got a record with this many fields.",5,null],[13,"InvalidUtf8","csv","An error occurred when trying to convert a field to a Unicode string.",5,null],[0,"index","","This sub-module provides experimental CSV record indexing.",null,null],[3,"Indexed","csv::index","A type for representing CSV data with a basic record index.",null,null],[5,"create_index","","Creates a new index for the given CSV reader.",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"indexed"}],"output":{"name":"reader"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"indexed"}],"output":{"name":"reader"}}],[11,"open","","Opens a new index corresponding to the CSV reader given.",6,{"inputs":[{"name":"reader"},{"name":"i"}],"output":{"name":"result"}}],[11,"seek","","Seeks to `i`th record.",6,{"inputs":[{"name":"indexed"},{"name":"u64"}],"output":{"name":"result"}}],[11,"count","","Returns the number of CSV records in the index in `O(1)` time.",6,{"inputs":[{"name":"indexed"}],"output":{"name":"u64"}}],[11,"borrow_bytes","collections::string","",7,null],[11,"borrow_bytes","collections::borrow","",8,null],[11,"new","csv","Creates a new encodable record. The value returned can be passed to\n`Encodable::encode`.",9,{"inputs":[],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used\nto access the raw CSV record.",9,{"inputs":[{"name":"encoded"}],"output":{"name":"vec"}}],[11,"emit_nil","","",9,{"inputs":[{"name":"encoded"}],"output":{"name":"result"}}],[11,"emit_usize","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u64","","",9,{"inputs":[{"name":"encoded"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_u32","","",9,{"inputs":[{"name":"encoded"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u16","","",9,{"inputs":[{"name":"encoded"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u8","","",9,{"inputs":[{"name":"encoded"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_isize","","",9,{"inputs":[{"name":"encoded"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i64","","",9,{"inputs":[{"name":"encoded"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_i32","","",9,{"inputs":[{"name":"encoded"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i16","","",9,{"inputs":[{"name":"encoded"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i8","","",9,{"inputs":[{"name":"encoded"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_bool","","",9,{"inputs":[{"name":"encoded"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f64","","",9,{"inputs":[{"name":"encoded"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_f32","","",9,{"inputs":[{"name":"encoded"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_char","","",9,{"inputs":[{"name":"encoded"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",9,{"inputs":[{"name":"encoded"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",9,{"inputs":[{"name":"encoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",9,{"inputs":[{"name":"encoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",9,{"inputs":[{"name":"encoded"}],"output":{"name":"result"}}],[11,"emit_option_some","","",9,{"inputs":[{"name":"encoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",9,{"inputs":[{"name":"encoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Creates a new decodable record from a record of byte strings.",10,{"inputs":[{"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",10,{"inputs":[{"name":"decoded"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_usize","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u64","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u32","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u16","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_u8","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_isize","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i64","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i32","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i16","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_i8","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_bool","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_f64","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_f32","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_char","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_str","","",10,{"inputs":[{"name":"decoded"}],"output":{"name":"result"}}],[11,"read_enum","","",10,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",10,null],[11,"read_enum_variant_arg","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",10,null],[11,"read_enum_struct_variant_field","","",10,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",10,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",10,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",10,{"inputs":[{"name":"decoded"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",10,{"inputs":[{"name":"decoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",10,{"inputs":[{"name":"decoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",10,{"inputs":[{"name":"decoded"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",10,{"inputs":[{"name":"decoded"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"recordterminator"}],"output":{"name":"recordterminator"}}],[11,"eq","","",2,{"inputs":[{"name":"recordterminator"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",11,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",11,{"inputs":[{"name":"s"}],"output":{"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",11,{"inputs":[{"name":"v"}],"output":{"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",11,{"inputs":[{"name":"reader"}],"output":{"name":"decodedrecords"}}],[11,"records","","Returns an iterator of records in the CSV data where each field is\na `String`.",11,{"inputs":[{"name":"reader"}],"output":{"name":"stringrecords"}}],[11,"headers","","Returns a *copy* of the first record in the CSV data as strings.",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when reading CSV data.",11,{"inputs":[{"name":"reader"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"has_headers","","Whether to treat the first row as a special header row.",11,{"inputs":[{"name":"reader"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",11,{"inputs":[{"name":"reader"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",11,{"inputs":[{"name":"reader"},{"name":"recordterminator"}],"output":{"name":"reader"}}],[11,"quote","","Set the quote character to use when reading CSV data.",11,{"inputs":[{"name":"reader"},{"name":"u8"}],"output":{"name":"reader"}}],[11,"escape","","Set the escape character to use when reading CSV data.",11,{"inputs":[{"name":"reader"},{"name":"option"}],"output":{"name":"reader"}}],[11,"double_quote","","Enable double quote escapes.",11,{"inputs":[{"name":"reader"},{"name":"bool"}],"output":{"name":"reader"}}],[11,"ascii","","A convenience method for reading ASCII delimited text.",11,{"inputs":[{"name":"reader"}],"output":{"name":"reader"}}],[11,"fmt","","",1,{"inputs":[{"name":"nextfield"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter_result","","Transform NextField into an iterator result.",1,{"inputs":[{"name":"nextfield"}],"output":{"name":"option"}}],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,{"inputs":[{"name":"nextfield"}],"output":{"name":"bool"}}],[11,"unwrap","","Returns the underlying field data.",1,{"inputs":[{"name":"nextfield"}],"output":{"name":"t"}}],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead\nof `String`s.",11,{"inputs":[{"name":"reader"}],"output":{"name":"result"}}],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead\nof `String`s.",11,{"inputs":[{"name":"reader"}],"output":{"name":"byterecords"}}],[11,"done","","Returns `true` if the CSV parser has reached its final state. When\nthis method returns `true`, all iterators will always return `None`.",11,{"inputs":[{"name":"reader"}],"output":{"name":"bool"}}],[11,"next_bytes","","An iterator over fields in the current record.",11,{"inputs":[{"name":"reader"}],"output":{"name":"nextfield"}}],[11,"next_str","","This is just like `next_bytes` except it converts each field to\na Unicode string in place.",11,{"inputs":[{"name":"reader"}],"output":{"name":"nextfield"}}],[11,"byte_offset","","Returns the byte offset at which the current record started.",11,{"inputs":[{"name":"reader"}],"output":{"name":"u64"}}],[11,"seek","","Seeks the underlying reader to the file cursor specified.",11,{"inputs":[{"name":"reader"},{"name":"u64"}],"output":{"name":"result"}}],[11,"next","","",12,{"inputs":[{"name":"decodedrecords"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"stringrecords"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"byterecords"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"quotestyle"}],"output":{"name":"quotestyle"}}],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",15,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",15,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",15,{"inputs":[{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any\ntime, `to_string` or `to_bytes` can be called to retrieve the\ncumulative CSV data.",15,{"inputs":[],"output":{"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",15,{"inputs":[{"name":"writer"}],"output":{"name":"str"}}],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",15,null],[11,"encode","","Writes a record by encoding any `Encodable` value.",15,{"inputs":[{"name":"writer"},{"name":"e"}],"output":{"name":"result"}}],[11,"write","","Writes a record of strings (Unicode or raw bytes).",15,{"inputs":[{"name":"writer"},{"name":"i"}],"output":{"name":"result"}}],[11,"flush","","Flushes the underlying buffer.",15,{"inputs":[{"name":"writer"}],"output":{"name":"result"}}],[11,"delimiter","","The delimiter to use when writing CSV data.",15,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",15,{"inputs":[{"name":"writer"},{"name":"bool"}],"output":{"name":"writer"}}],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",15,{"inputs":[{"name":"writer"},{"name":"recordterminator"}],"output":{"name":"writer"}}],[11,"quote_style","","Set the quoting style to use when writing CSV data.",15,{"inputs":[{"name":"writer"},{"name":"quotestyle"}],"output":{"name":"writer"}}],[11,"quote","","Set the quote character to use when writing CSV data.",15,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"escape","","Set the escape character to use when writing CSV data.",15,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":{"name":"writer"}}],[11,"double_quote","","Set the quoting escape mechanism.",15,{"inputs":[{"name":"writer"},{"name":"bool"}],"output":{"name":"writer"}}],[6,"Result","","A convenience type for representing the result of most CSV reader/writer\noperations.",null,null],[6,"ByteString","","A convenience type for referring to a plain byte string.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",16,null],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"locatableerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"locatableerror"}],"output":{"name":"locatableerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"locatableerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"borrow_bytes","","",17,null]],"paths":[[3,"LocatableError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseError"],[3,"Indexed"],[3,"String"],[4,"Cow"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"],[6,"ByteString"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",13,null],[12,"sin_port","","",13,null],[12,"sin_addr","","",13,null],[12,"sin_zero","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",16,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",17,null],[12,"ai_family","","",17,null],[12,"ai_socktype","","",17,null],[12,"ai_protocol","","",17,null],[12,"ai_addrlen","","",17,null],[12,"ai_addr","","",17,null],[12,"ai_canonname","","",17,null],[12,"ai_next","","",17,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",18,null],[12,"sll_protocol","","",18,null],[12,"sll_ifindex","","",18,null],[12,"sll_hatype","","",18,null],[12,"sll_pkttype","","",18,null],[12,"sll_halen","","",18,null],[12,"sll_addr","","",18,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",19,null],[12,"tm_min","","",19,null],[12,"tm_hour","","",19,null],[12,"tm_mday","","",19,null],[12,"tm_mon","","",19,null],[12,"tm_year","","",19,null],[12,"tm_wday","","",19,null],[12,"tm_yday","","",19,null],[12,"tm_isdst","","",19,null],[12,"tm_gmtoff","","",19,null],[12,"tm_zone","","",19,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",20,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",21,null],[12,"dli_fbase","","",21,null],[12,"dli_sname","","",21,null],[12,"dli_saddr","","",21,null],[3,"epoll_event","","",null,null],[12,"events","","",22,null],[12,"u64","","",22,null],[3,"utsname","","",null,null],[12,"sysname","","",23,null],[12,"nodename","","",23,null],[12,"release","","",23,null],[12,"version","","",23,null],[12,"machine","","",23,null],[12,"domainname","","",23,null],[3,"dirent","","",null,null],[12,"d_ino","","",24,null],[12,"d_off","","",24,null],[12,"d_reclen","","",24,null],[12,"d_type","","",24,null],[12,"d_name","","",24,null],[3,"dirent64","","",null,null],[12,"d_ino","","",25,null],[12,"d_off","","",25,null],[12,"d_reclen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",26,null],[12,"rlim_max","","",26,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",27,null],[12,"gl_pathv","","",27,null],[12,"gl_offs","","",27,null],[12,"gl_flags","","",27,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",28,null],[12,"ifa_name","","",28,null],[12,"ifa_flags","","",28,null],[12,"ifa_addr","","",28,null],[12,"ifa_netmask","","",28,null],[12,"ifa_ifu","","",28,null],[12,"ifa_data","","",28,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",29,null],[12,"pw_passwd","","",29,null],[12,"pw_uid","","",29,null],[12,"pw_gid","","",29,null],[12,"pw_gecos","","",29,null],[12,"pw_dir","","",29,null],[12,"pw_shell","","",29,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",30,null],[12,"f_frsize","","",30,null],[12,"f_blocks","","",30,null],[12,"f_bfree","","",30,null],[12,"f_bavail","","",30,null],[12,"f_files","","",30,null],[12,"f_ffree","","",30,null],[12,"f_favail","","",30,null],[12,"f_fsid","","",30,null],[12,"f_flag","","",30,null],[12,"f_namemax","","",30,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",31,null],[12,"nl_pid","","",31,null],[12,"nl_groups","","",31,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",32,null],[12,"dqb_bsoftlimit","","",32,null],[12,"dqb_curspace","","",32,null],[12,"dqb_ihardlimit","","",32,null],[12,"dqb_isoftlimit","","",32,null],[12,"dqb_curinodes","","",32,null],[12,"dqb_btime","","",32,null],[12,"dqb_itime","","",32,null],[12,"dqb_valid","","",32,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",33,null],[12,"ssi_errno","","",33,null],[12,"ssi_code","","",33,null],[12,"ssi_pid","","",33,null],[12,"ssi_uid","","",33,null],[12,"ssi_fd","","",33,null],[12,"ssi_tid","","",33,null],[12,"ssi_band","","",33,null],[12,"ssi_overrun","","",33,null],[12,"ssi_trapno","","",33,null],[12,"ssi_status","","",33,null],[12,"ssi_int","","",33,null],[12,"ssi_ptr","","",33,null],[12,"ssi_utime","","",33,null],[12,"ssi_stime","","",33,null],[12,"ssi_addr","","",33,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",34,null],[12,"mq_maxmsg","","",34,null],[12,"mq_msgsize","","",34,null],[12,"mq_curmsgs","","",34,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_flags","","",36,null],[12,"ss_size","","",36,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",37,null],[12,"si_errno","","",37,null],[12,"si_code","","",37,null],[12,"_pad","","",37,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ucred","","",null,null],[12,"pid","","",39,null],[12,"uid","","",39,null],[12,"gid","","",39,null],[3,"statfs","","",null,null],[12,"f_type","","",40,null],[12,"f_bsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_fsid","","",40,null],[12,"f_namelen","","",40,null],[12,"f_frsize","","",40,null],[3,"msghdr","","",null,null],[12,"msg_name","","",41,null],[12,"msg_namelen","","",41,null],[12,"msg_iov","","",41,null],[12,"msg_iovlen","","",41,null],[12,"msg_control","","",41,null],[12,"msg_controllen","","",41,null],[12,"msg_flags","","",41,null],[3,"termios","","",null,null],[12,"c_iflag","","",42,null],[12,"c_oflag","","",42,null],[12,"c_cflag","","",42,null],[12,"c_lflag","","",42,null],[12,"c_line","","",42,null],[12,"c_cc","","",42,null],[12,"c_ispeed","","",42,null],[12,"c_ospeed","","",42,null],[3,"flock","","",null,null],[12,"l_type","","",43,null],[12,"l_whence","","",43,null],[12,"l_start","","",43,null],[12,"l_len","","",43,null],[12,"l_pid","","",43,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",44,null],[12,"st_ino","","",44,null],[12,"st_nlink","","",44,null],[12,"st_mode","","",44,null],[12,"st_uid","","",44,null],[12,"st_gid","","",44,null],[12,"st_rdev","","",44,null],[12,"st_size","","",44,null],[12,"st_blksize","","",44,null],[12,"st_blocks","","",44,null],[12,"st_atime","","",44,null],[12,"st_atime_nsec","","",44,null],[12,"st_mtime","","",44,null],[12,"st_mtime_nsec","","",44,null],[12,"st_ctime","","",44,null],[12,"st_ctime_nsec","","",44,null],[3,"stat64","","",null,null],[12,"st_dev","","",45,null],[12,"st_ino","","",45,null],[12,"st_nlink","","",45,null],[12,"st_mode","","",45,null],[12,"st_uid","","",45,null],[12,"st_gid","","",45,null],[12,"st_rdev","","",45,null],[12,"st_size","","",45,null],[12,"st_blksize","","",45,null],[12,"st_blocks","","",45,null],[12,"st_atime","","",45,null],[12,"st_atime_nsec","","",45,null],[12,"st_mtime","","",45,null],[12,"st_mtime_nsec","","",45,null],[12,"st_ctime","","",45,null],[12,"st_ctime_nsec","","",45,null],[3,"pthread_attr_t","","",null,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",48,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",48,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",48,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",48,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",48,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",48,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",48,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",48,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",48,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",49,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",49,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"fmt","","",50,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",51,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",51,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",52,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",53,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",53,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",54,null],[11,"get","","Dereferences the content.",54,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",54,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",55,null],[11,"clone","","",55,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",56,null],[11,"eq","","",56,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",56,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",56,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",57,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",57,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",58,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",59,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",60,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",61,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",61,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",61,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",62,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",62,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",62,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",62,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",62,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",62,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",62,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",63,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",64,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",68,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",64,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",64,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",64,null],[11,"swap","","Stores a value into the bool, returning the old value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",64,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",64,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",65,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",65,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",65,null],[11,"swap","","Stores a value into the isize, returning the old value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",65,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",65,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",66,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",66,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",66,null],[11,"swap","","Stores a value into the usize, returning the old value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",66,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",66,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",67,null],[11,"load","","Loads a value from the pointer.",67,null],[11,"store","","Stores a value into the pointer.",67,null],[11,"swap","","Stores a value into the pointer, returning the old value.",67,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",67,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",67,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",67,null],[11,"fmt","","",66,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",69,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",69,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",69,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",69,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",69,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",69,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",71,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",71,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",71,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",71,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",71,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",71,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",71,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",71,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",72,null],[11,"clone","","",72,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",73,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",73,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",73,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",73,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",74,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",74,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",75,null],[11,"deref","","",74,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",74,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",76,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",76,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",76,null],[11,"clone","core::char","",77,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",78,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",77,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",79,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",80,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",79,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"count","","",79,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",79,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",79,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",81,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",81,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",82,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",83,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"clone","","",84,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",85,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",84,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",84,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",84,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",84,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",86,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",87,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",88,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",89,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",89,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",90,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"nth","","",90,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",90,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",90,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",91,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",91,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",91,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",91,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",91,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",91,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",91,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",92,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",93,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",93,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"clone","","",94,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",94,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",94,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",94,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",94,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"clone","","",95,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",95,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",95,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",96,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",96,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",97,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",98,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",98,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",99,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",59,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",58,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",100,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"clone","","",101,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",101,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",100,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next","core::ops","",58,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",102,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",102,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",103,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",103,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",104,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",104,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",104,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",105,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",105,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next_back","","",106,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",107,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",108,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",48,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",109,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",110,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",111,null],[11,"fmt","","",111,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",111,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",111,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",111,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",111,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",111,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",111,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",111,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",111,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",111,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",111,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",111,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",111,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",111,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",111,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",111,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",111,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",111,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",111,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",111,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",112,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",113,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",111,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",115,null],[11,"next","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"count","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",115,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",116,null],[11,"next","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"count","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",116,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",117,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",117,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",118,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",118,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",119,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next","","",120,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next","","",121,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next","","",122,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next","","",123,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"clone","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"count","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",124,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",124,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"count","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",125,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"count","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",126,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",127,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",128,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",129,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",128,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",128,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",128,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",130,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",131,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",132,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",133,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",134,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",135,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",133,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",133,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",133,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",133,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",136,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",137,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",137,null],[11,"matching","","",137,null],[11,"use_early_reject","","",138,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",138,null],[11,"matching","","",138,null],[11,"eq","core::str","",139,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",139,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",140,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",140,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",140,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",141,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",141,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",142,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",142,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",142,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",143,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",143,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"count","","",143,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",143,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",143,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",143,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",143,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",144,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",145,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",146,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",145,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",147,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",147,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",148,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",147,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",148,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",150,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",151,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",152,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",153,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",154,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",153,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",156,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",157,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",156,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",158,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",158,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"next_back","","",158,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",160,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",160,null],[11,"call_mut","","",160,null],[11,"call_once","","",160,null],[11,"next","","",159,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"next_back","","",159,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",162,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",162,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",162,null],[11,"finish","","",162,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",162,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",163,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",163,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",164,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",165,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",166,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",167,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",168,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",169,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",170,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",171,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",172,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",172,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",173,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",173,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",173,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",174,null],[11,"entry","","Adds a new entry to the set output.",175,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",175,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",175,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",176,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",176,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",176,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",177,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",177,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",177,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",178,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",179,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",180,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",181,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",181,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",182,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",182,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",182,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",182,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",182,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",182,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",182,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",182,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",182,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",182,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",182,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",182,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",182,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",182,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",182,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",56,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",69,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",183,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",183,null],[11,"clone","libc","",44,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",45,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",184,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",185,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",35,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",38,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",39,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",40,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",41,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",42,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",43,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",24,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",25,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",26,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",27,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",28,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",186,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",187,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",188,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",189,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",29,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",30,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",31,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",32,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",33,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",190,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",34,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",191,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",17,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",192,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",19,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",20,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",21,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",22,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",23,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"AF_NETLINK","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"stat"],[3,"stat64"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",3,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"vecmap"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",3,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",3,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",3,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",4,{"inputs":[{"name":"interleave"}],"output":{"name":"interleave"}}],[11,"new","","Creat a new `Interleave` iterator.",4,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",4,{"inputs":[{"name":"interleave"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"interleaveshortest"}}],[11,"new","","Create a new `InterleaveShortest` iterator.",5,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",5,{"inputs":[{"name":"interleaveshortest"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"putback"}],"output":{"name":"putback"}}],[11,"new","","Iterator element type is `A`",6,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",6,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",6,null],[11,"put_back","","Put back a single value to the front of the iterator.",6,{"inputs":[{"name":"putback"},{"name":"item"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"putback"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"new","","Iterator element type is `A`",7,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",7,{"inputs":[{"name":"putbackn"},{"name":"item"}],"output":null}],[11,"next","","",7,{"inputs":[{"name":"putbackn"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"putbackn"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","Create a new cartesian product iterator",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",8,{"inputs":[{"name":"product"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"batching"}],"output":{"name":"batching"}}],[11,"new","","Create a new Batching iterator.",9,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",9,{"inputs":[{"name":"batching"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"groupby"}],"output":{"name":"groupby"}}],[11,"new","","Create a new `GroupBy` iterator.",10,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",10,{"inputs":[{"name":"groupby"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"step"}],"output":{"name":"step"}}],[11,"new","","Create a `Step` iterator.",11,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",11,{"inputs":[{"name":"step"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"merge"}],"output":{"name":"self"}}],[11,"next","","",12,{"inputs":[{"name":"merge"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"mergeby"}],"output":{"name":"self"}}],[11,"next","","",13,{"inputs":[{"name":"mergeby"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"multipeek"}],"output":{"name":"multipeek"}}],[11,"new","","Create a `MultiPeek` iterator.",14,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn&#39;t\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",14,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"multipeek"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"coalesce"}],"output":{"name":"self"}}],[11,"new","","Create a new `Coalesce`.",15,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",15,{"inputs":[{"name":"coalesce"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"dedup"}],"output":{"name":"self"}}],[11,"new","","Create a new `Dedup`.",16,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"dedup"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"clone","","",17,{"inputs":[{"name":"mendslices"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",17,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"mendslices"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,{"inputs":[{"name":"takewhileref"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"whilesome"}],"output":{"name":"whilesome"}}],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"whilesome"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"clone","","",20,{"inputs":[{"name":"combinations"}],"output":{"name":"combinations"}}],[11,"new","","Create a new `Combinations` from a clonable iterator.",20,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",20,{"inputs":[{"name":"combinations"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",21,{"inputs":[{"name":"combinationsn"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"uniqueby"}],"output":{"name":"uniqueby"}}],[11,"new","","Create a new `UniqueBy` iterator.",22,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",22,{"inputs":[{"name":"uniqueby"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next","","",23,{"inputs":[{"name":"unique"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"unique"}],"output":{"name":"unique"}}],[11,"new","","Create a new `Flatten` iterator.",24,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",24,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"flatten"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"flatten"}],"output":{"name":"self"}}],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"fmt","itertools","",25,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"groups"}],"output":{"name":"option"}}],[11,"drop","","",27,{"inputs":[{"name":"group"}],"output":null}],[11,"next","","",27,{"inputs":[{"name":"group"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"drop","","",29,{"inputs":[{"name":"chunk"}],"output":null}],[11,"next","","",29,{"inputs":[{"name":"chunk"}],"output":{"name":"option"}}],[11,"clone","","",30,{"inputs":[{"name":"intersperse"}],"output":{"name":"intersperse"}}],[11,"new","","Create a new Intersperse iterator",30,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",30,{"inputs":[{"name":"intersperse"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"clone","","",31,{"inputs":[{"name":"islice"}],"output":{"name":"islice"}}],[11,"new","","Create a new **ISlice**.",31,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",31,{"inputs":[{"name":"islice"}],"output":{"name":"option"}}],[11,"size_hint","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"kmerge"}],"output":{"name":"kmerge"}}],[11,"next","","",32,{"inputs":[{"name":"kmerge"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"fmt","","",33,{"inputs":[{"name":"linspace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"linspace"}}],[11,"next","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"linspace"}],"output":{"name":"option"}}],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",34,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",34,{"inputs":[{"name":"intoiteratortuple"}],"output":{"name":"output"}}],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",35,null],[10,"append","","“Append” value `x` to a tuple.",35,{"inputs":[{"name":"appendtuple"},{"name":"x"}],"output":{"name":"result"}}],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",36,null],[11,"clone","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"flattuples"}}],[11,"next","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"flattuples"}],"output":{"name":"option"}}],[11,"start","core::ops","",38,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",39,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",40,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","itertools","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"padusing"}}],[11,"new","","Create a new **PadUsing** iterator.",41,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next_back","","",41,{"inputs":[{"name":"padusing"}],"output":{"name":"option"}}],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"rciter"}}],[11,"next","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"rciter"}],"output":{"name":"option"}}],[11,"new","","Create a new **RepeatN** with **n** repetitions.",42,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",42,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"repeatn"}],"output":{"name":"option"}}],[11,"new","","Create a new `RepeatCall` from a closure.",43,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",43,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"repeatcall"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"unfold"}}],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,{"inputs":[{"name":"unfold"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",44,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",44,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",44,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",44,{"inputs":[{"name":"stride"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",44,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",44,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",44,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,{"inputs":[{"name":"stridemut"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"next","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",45,{"inputs":[{"name":"stridemut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",45,{"inputs":[{"name":"stridemut"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"clone","","",44,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",45,{"inputs":[{"name":"stridemut"},{"name":"usize"}],"output":{"name":"a"}}],[11,"next","","",46,{"inputs":[{"name":"tee"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"ziplongest"}}],[11,"new","","Create a new `ZipLongest` iterator.",47,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"next_back","","",47,{"inputs":[{"name":"ziplongest"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"eitherorboth"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"eitherorboth"}],"output":{"name":"eitherorboth"}}],[11,"clone","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"new","","Create a new `Zip` from a tuple of iterators.",48,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next","","",48,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"zipslices"}}],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",49,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",49,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"option"}}],[11,"len","","",49,{"inputs":[{"name":"zipslices"}],"output":{"name":"usize"}}],[11,"get_unchecked","","",49,{"inputs":[{"name":"zipslices"},{"name":"usize"}],"output":{"name":"item"}}],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",50,{"inputs":[{"name":"itertools"},{"name":"item"}],"output":{"name":"intersperse"}}],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"groupbylazy"}}],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"chunkslazy"}}],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",50,null],[11,"slice","","Return a sliced iterator.",50,{"inputs":[{"name":"itertools"},{"name":"r"}],"output":{"name":"islice"}}],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"rciter"}}],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"step"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",50,{"inputs":[{"name":"itertools"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"product"}}],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"multipeek"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements. For each pair the closure\nis passed the latest two elements, `x`, `y` and may return either `Ok(z)`\nto merge the two values or `Err((x, y))` to indicate they can&#39;t be merged.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"mendslices"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"whilesome"}}],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"combinations"}}],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",50,{"inputs":[{"name":"itertools"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"flatten"}}],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",50,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",50,{"inputs":[{"name":"itertools"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",50,{"inputs":[{"name":"itertools"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",50,{"inputs":[{"name":"itertools"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",50,{"inputs":[{"name":"itertools"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",50,{"inputs":[{"name":"itertools"},{"name":"str"},{"name":"f"}],"output":{"name":"format"}}],[11,"fold_results","","Fold `Result` values from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",50,{"inputs":[{"name":"itertools"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"option"}}],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"option"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",50,{"inputs":[{"name":"itertools"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",50,{"inputs":[{"name":"itertools"},{"name":"f"}],"output":{"name":"vec"}}],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"EitherOrBoth"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
